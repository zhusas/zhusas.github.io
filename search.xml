<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL启用的SSL连接的思考与实践</title>
      <link href="/2018/08/01/mysql-ssl/"/>
      <url>/2018/08/01/mysql-ssl/</url>
      <content type="html"><![CDATA[<h2 id="MySQL启用的SSL连接的思考与实践"><a href="#MySQL启用的SSL连接的思考与实践" class="headerlink" title="MySQL启用的SSL连接的思考与实践"></a>MySQL启用的SSL连接的思考与实践</h2><p><img src="/github.io/2018/08/01/mysql-ssl/images/pasted-0.png" alt="pasted-0"></p><p>由于工作上的业务发展和等保三级合规的要求，需要考虑为MySQL启用SSL连接，那么今天就来说说这个怎么玩。其实一个月前已经在实现了用docker跑MySQL SSL了，只不过后到今天才有时间静下心来总结一下。</p><h3 id="有必要使用为MySQL启用SSL吗？"><a href="#有必要使用为MySQL启用SSL吗？" class="headerlink" title="有必要使用为MySQL启用SSL吗？"></a>有必要使用为MySQL启用SSL吗？</h3><p>先来了解一下SSL吧：</p><p><strong>SSL</strong>（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。<a id="more"></a></p><p>SSL协议提供的功能主要有：</p><p>​    1、 数据传输的机密性：利用对称密钥算法对传输的数据进行加密。<br>    2.、身份验证机制：基于证书利用数字签名方法对服务器和客户端进行身份验证，其中客户端的身份验证是可选的。<br>    3、 消息完整性验证：消息传输过程中使用MAC算法来检验消息的完整性。</p><p>如果用户的传输不是通过SSL的方式，那么其在网络中数据都是以明文进行传输的，而这给别有用心的人带来了可乘之机。所以，现在很多大型网站都开启了SSL功能。同样地，在我们数据库方面，如果客户端连接服务器获取数据不是使用SSL连接，那么在传输过程中，数据就有可能被窃取。</p><p>所以，我认为启用SSL是一个不错的选择。</p><h3 id="那么SSL如何工作在MySQL中的"><a href="#那么SSL如何工作在MySQL中的" class="headerlink" title="那么SSL如何工作在MySQL中的"></a>那么SSL如何工作在MySQL中的</h3><p>这里分两说，因为工作中我涉及到MySQL5.6和MySQL 5.7两个版本，它们在SSL连接的实现上也有少许区别。</p><p><strong>MySQL5.6的SSL</strong></p><p>MySQL  5.6中的SSL文档非常详细，它解释了SSL的工作原理。但首先让我们说清楚一点：MySQL支持使用TLS（传输层安全性）协议在客户端和服务器之间建立安全（加密）连接。 TLS有时被称为SSL（安全套接字层），但MySQL实际上并不使用SSL协议进行安全连接，因为它提供弱加密。 </p><p>因此，当我们有人说MySQL正在使用SSL时，它实际上意味着它正在使用TLS。您可以使用以下命令检查您使用的协议： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;Ssl_version&apos;;</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Ssl_version | TLSv1.2 |</span><br><span class="line">+---------------+---------+</span><br></pre></td></tr></table></figure><p>TLS使用加密算法来确保可以信任通过公共网络接收的数据。它具有检测数据更改，丢失或重放的机制。 TLS还包含使用X509标准提供身份验证的算法。  X509可以识别互联网上的某个人。在基本术语中，应该有一些称为“证书颁发机构”（或CA）的实体，它将电子证书分配给需要它们的任何人。证书依赖于具有两个加密密钥（公钥和密钥）的非对称加密算法。证书所有者可以将证书提供给另一方作为身份证明。证书由其所有者的公钥组成。使用该公钥加密的任何数据只能使用由证书所有者持有的相应密钥解密。</p><p>MySQL5.6只支持TLSv1，MySQL5.7则支持TLSv1, TLSv1.1, and TLSv1.2 。</p><p>MySQL支持使用TLS协议的加密连接：<br>    使用OpenSSL 1.0.1或更高版本编译时，MySQL支持TLSv1，TLSv1.1和TLSv1.2协议。<br>    当使用捆绑版本的yaSSL进行编译时，MySQL支持TLSv1和TLSv1.1协议。 </p><p>使用SSL配置服务器时，客户端必须具有客户端证书。获得后，它可以使用SSL连接到服务器。MySQL5.6的客户端必须指定密钥和证书。否则，我们无法使用SSL连接到服务器。 如下：</p><p>my.cnf配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line">pid-file= /var/run/mysqld/mysqld.pid</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir= /var/lib/mysql</span><br><span class="line">#log-error= /var/log/mysql/error.log</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">ssl-ca=/etc/mysql/certs/ca.pem</span><br><span class="line">ssl-cert=/etc/mysql/certs/MySQL1-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/certs/MySQL1-key.pem</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">ssl-ca=/etc/mysql/certs/ca.pem</span><br><span class="line">ssl-cert=/etc/mysql/certs/MySQL-client-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/certs/MySQL-client-key.pem</span><br></pre></td></tr></table></figure><p>客户端连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --ssl-ca=/etc/mysql/certs/ca.pem  --ssl-cert=/etc/mysql/certs/MySQL-client-cert.pem --ssl-key=/etc/mysql/certs/MySQL-client-key.pem</span><br></pre></td></tr></table></figure><p><strong>MySQL5.7的SSL</strong></p><p>默认情况下，如果服务器支持加密连接，MySQL程序将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。有关影响加密连接使用的选项的信息 。<br>MySQL基于每个连接执行加密，并且对给定用户使用加密可以是可选的或强制的。可以根据各个应用程序的要求选择加密或未加密的连接。在CREATE USER的时候，有SSL相关的参数可以选择，这个创建用户参数取决于其用户连接时，是否必须使用密钥文件连接MySQL。</p><p>这些在官方文档里面都有说明，可以去详细了解下。这里就不铺开了。</p><p><strong>MySQL 5.7中的加密连接支持进行了一些改进。以下时间表总结了这些变化：</strong>        </p><p>5.7.3：在客户端，明确的–ssl选项不再是建议性的，而是规定性的。如果服务器支持加密连接，则客户端程序可以通过仅指定–ssl选项来要求加密连接。 （以前，客户端必须指定–ssl-ca选项，或者所有三个–ssl-ca， –ssl-key和–ssl-cert选项。）连接尝试失败如果无法建立加密连接。客户端的其他–ssl-xxx选项在没有–ssl的情况下是建议性的：客户端尝试使用加密进行连接，但如果无法建立加密连接，则会回退到未加密的连接。        </p><p>5.7.5：默认情况下启用服务器端–ssl选项值。        对于使用OpenSSL编译的服务器，auto_generate_certs和sha256_password_auto_generate_rsa_keys系统变量可用于在启动时启用SSL /  RSA证书和密钥文件的自动生成和自动发现。对于证书和密钥自动发现，如果启用了–ssl并且未给出其他–ssl-xxx选项以明确配置加密连接，则服务器会在启动时尝试自动启用对加密连接的支持，如果它发现必需的证书和密钥文件在数据目录中。        </p><p>5.7.6：mysql_ssl_rsa_setup实用程序可用于手动生成SSL / RSA证书和密钥文件。启动时自动发现SSL / RSA文件将扩展为适用于所有服务器，无论是使用OpenSSL还是使用yaSSL编译。  （这意味着无需启用auto_generate_certs即可进行自动发现。）        如果服务器在启动时发现CA证书是自签名的，则会向错误日志写入警告。 （如果服务器自动创建证书，则证书是自签名的，或者使用mysql_ssl_rsa_setup手动创建证书。）        </p><p>5.7.7：如果服务器支持加密连接，则C客户端库会默认尝试建立加密连接。这会影响客户程序，如下所示：            </p><ul><li>如果没有–ssl选项，客户端将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。            </li><li>显式–ssl选项或同义词（–ssl = 1， -  enable-ssl）的存在是规定性的：客户端需要加密连接，如果无法建立，则会失败。</li><li>使用–ssl = 0选项或同义词（–skip-ssl， -  disable-ssl），客户端使用未加密的连接.此更改还会影响基于C客户端库的MySQL连接器的后续版本：Connector / C，Connector / C ++和Connector / ODBC。        </li></ul><p>5.7.8：require_secure_transport系统变量可用于控制与服务器的客户端连接是否必须使用某种形式的安全传输。        </p><p>5.7.10：TLS协议支持从TLSv1扩展到TLSv1.1和TLSv1.2。服务器端的tls_version系统变量和客户端的–tls-version选项可以选择支持级别。   </p><p>5.7.11：MySQL客户端程序支持–ssl-mode选项，使您可以指定与服务器的连接的安全状态。  –ssl-mode选项包括客户端–ssl和–ssl-verify-server-cert选项的功能。因此，不推荐使用–ssl和–ssl-verify-server-cert，MySQL 8.0中已经删除它们。 </p><p>好，上边说了这么多，各位都看明白了吗？不明白也没关系，我下面用docker来演示</p><p><strong>坑点：我用许多客户端应用程序对它进行了测试，无论是MySQL5.6或5.7，MySQL客户端连接服务端时必须指定客户端密钥。没有密钥，无法连接到服务器。某些较旧的应用程序可能不支持此功能。 所以啊，官档说的也不一定全对。</strong></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>这里以MySQL5.6为例</p><p>1、建立目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir -pv mysql_ssl_&#123;data,config,cert&#125;</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_data'</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_config'</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_cert'</span></span><br></pre></td></tr></table></figure><p>准备好数据、证书、配置等文件</p><p>2、启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql5.6_ssl_test -v /data/mysql_ssl_data/:/var/lib/mysql -v /data/mysql_ssl_config/my.cnf:/etc/my.cnf -v /data/mysql_ssl_cert/:/etc/mysql/certs -p 3306:3306 mysql:5.6.40</span><br></pre></td></tr></table></figure><p>3、因为MySQL5.6默认用户是不开启SSL认证的，需要进行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改已存在用户 </span></span><br><span class="line">GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509;</span><br><span class="line"><span class="comment">#新建必须使用SSL用户</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'user'</span>@<span class="string">'%'</span> identified by <span class="string">'111111'</span> with grant option;</span><br><span class="line">GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509;</span><br></pre></td></tr></table></figure><p>对于具有REQUIRE  X509的帐户，客户端必须指定要连接的–ssl-key和–ssl-cert选项。  （建议但不要求也指定–ssl-ca，以便验证服务器提供的公共证书。）对于ISSUER和SUBJECT也是如此，因为这些REQUIRE选项意味着X509的要求。 </p><p>好，现在无论是用图形化工具还是使用命令行客户端，都必须指定客户端的证书及密钥文件，加上账户密码，才能连接登录MySQL了。</p><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/mysql-dba/p/7061300.html" target="_blank" rel="noopener">https://www.cnblogs.com/mysql-dba/p/7061300.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html</a></p><p>​</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>MongoDB备份数据引擎升级</title>
      <link href="/2018/07/09/mongodb/"/>
      <url>/2018/07/09/mongodb/</url>
      <content type="html"><![CDATA[<h2 id="MongoDB备份数据引擎升级"><a href="#MongoDB备份数据引擎升级" class="headerlink" title="MongoDB备份数据引擎升级"></a>MongoDB备份数据引擎升级</h2><p><strong>准备工作</strong></p><ol><li>确认已经安装需要运行的MongoDB版本</li><li>确保有足够的空间进行数据导出导入</li><li>您必须使用MongoDB版本3.0或更高版本才能使用WireldTiger存储引擎。 如果使用较早的MongoDB版本，则必须在继续更改存储引擎之前升级MongoDB版本。本文使用的是MongoDB 3.6</li><li>本文使用docker来操作，请自行安装好docker环境。<a id="more"></a></li><li>直接在裸机安装MongoDB 3.6进行操作亦可。</li><li>这里演示从MongoDB 2.6备份出来的数据还原到MongoDB 3.6 并以WireldTiger引擎启动运行</li></ol><p><strong>步骤</strong></p><p>1、启动你要运行的MongoDB版本，本文用的是3.6 ，Docker运行，配置文件写明要以<code>wiredTiger</code>  启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name <span class="variable">$CONTAINER_NAME</span> -v <span class="variable">$DATA_PATH</span>:/data/db -v <span class="variable">$OLD_DATA_PATH</span>:/data2 -v /<span class="variable">$CONFIG_PATH</span>/mongod.conf:/etc/mongod.conf.orig -p <span class="variable">$IP</span>:27017:27017 mongo:3.6</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">作用说明</th></tr></thead><tbody><tr><td style="text-align:center">$CONTAINER_NAME</td><td style="text-align:center">自定义的容器名字</td></tr><tr><td style="text-align:center">$DATA_PATH</td><td style="text-align:center">容器在宿主机上的数据卷路径</td></tr><tr><td style="text-align:center">$OLD_DATA_PATH</td><td style="text-align:center">待升级的老版本MongoDB备份数据</td></tr><tr><td style="text-align:center">$CONFIG_PATH</td><td style="text-align:center">新版MongoDB的配置文件目录</td></tr><tr><td style="text-align:center">$IP</td><td style="text-align:center">MongoDB容器对外提供服务的IP地址</td></tr></tbody></table><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  dbPath:</span> <span class="string">/var/lib/mongodb</span></span><br><span class="line"><span class="attr">    journal:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    engine:</span> <span class="string">wiredTiger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">  systemLog:</span></span><br><span class="line"><span class="attr">    destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/var/log/mongodb/mongod.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">    net:</span></span><br><span class="line"><span class="attr">     port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">     bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">    processManagement:</span></span><br><span class="line"><span class="attr">    timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br></pre></td></tr></table></figure><p>2、把 MongoDB 2.6的备份数据解压到$OLD_DATA_PATH</p><p>3、进入MongoDB 3.6的容器中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$CONTAINER_NAME</span> /bin/bash <span class="comment">#进入docker并分配bash终端</span></span><br><span class="line">mongorestore data2/<span class="comment">#从data2目录中导入备份数据</span></span><br></pre></td></tr></table></figure><p>OK，接下来静候佳音即可。中间会有一段漫长的导入数据，转换引擎，重建索引的过程。</p><p>当然，你要是土豪，用固态硬盘也是极好的。</p><p>4、最后一步，查看一下数据引擎。运行db.serverStatus()命令,查询结果包含如下内容即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"storageEngine" : &#123;</span><br><span class="line">"name" : "wiredTiger",</span><br><span class="line">"supportsCommittedReads" : true,</span><br><span class="line">"readOnly" : false,</span><br><span class="line">"persistent" : true</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> MongoDB,Docker </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
