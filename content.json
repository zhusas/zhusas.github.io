{"meta":{"title":"Jerry's Blog","subtitle":null,"description":"ops.linux","author":"Jerry Zhu","url":"https://zhusas.github.io"},"pages":[{"title":"about","date":"2018-06-01T08:02:08.000Z","updated":"2018-08-03T01:45:39.984Z","comments":true,"path":"about/index.html","permalink":"https://zhusas.github.io/about/index.html","excerpt":"","text":"About Jerry颜高活好话少不粘人 生在北海，学于武汉，飘在武汉，一个把他乡当故乡的人 网络上经常以 Jerry 之名出现 目前是一名运维工程师，专注于云计算、容器、网络、数据库和分布式技术 博客文章大部分是我原创，翻译和转载的文章在标题上已经注明"},{"title":"分类&标签","date":"2018-08-02T06:33:33.000Z","updated":"2018-08-02T06:34:22.904Z","comments":true,"path":"tags/index.html","permalink":"https://zhusas.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"脚本小练","slug":"脚本小练","date":"2018-08-05T02:49:00.000Z","updated":"2018-08-05T02:51:11.366Z","comments":true,"path":"2018/08/05/脚本小练/","link":"","permalink":"https://zhusas.github.io/2018/08/05/脚本小练/","excerpt":"1、判断当前系统上所有用户的shell是否为可登录shell（即用户的shell不是/sbin/nologin）；分别这两类用户的个数；通过字符串比较来实现； 1234567891011121314151617#脚本内容[root@centos script]# cat week9_title1.sh #!/bin/bash#Author Jerry##Display shell is nologin user's shell count echo \"The shell is nologin user count is $(grep -o \"nologin\" /etc/passwd |wc -l)\" #Display shell not's nologin user's shell count echo \"The shell not's nologin user count is $(grep -v \"nologin\" /etc/passwd |wc -l)\" #测试脚本[root@centos script]# bash week9_title1.sh The shell is nologin user count is 25The shell not's nologin user count is 7[root@centos script]#","text":"1、判断当前系统上所有用户的shell是否为可登录shell（即用户的shell不是/sbin/nologin）；分别这两类用户的个数；通过字符串比较来实现； 1234567891011121314151617#脚本内容[root@centos script]# cat week9_title1.sh #!/bin/bash#Author Jerry##Display shell is nologin user's shell count echo \"The shell is nologin user count is $(grep -o \"nologin\" /etc/passwd |wc -l)\" #Display shell not's nologin user's shell count echo \"The shell not's nologin user count is $(grep -v \"nologin\" /etc/passwd |wc -l)\" #测试脚本[root@centos script]# bash week9_title1.sh The shell is nologin user count is 25The shell not's nologin user count is 7[root@centos script]# 2、写一个脚本 (1) 获取当前主机的主机名，保存于hostname变量中； (2) 判断此变量的值是否为localhost，如果是，则将当前主机名修改为www.docker.com； (3) 否则，则显示当前主机名； 123456789101112131415[root@centos script]# cat week9_title2.sh #!/bin/bash#Author Jerry#hostname=$(hostname)if [ $hostname == \"localhost\" ];then hostname www.docker.com echo \"current hostname is:$hostname\"else echo \"current hostname is:$hostname\"fi[root@centos script]# 3、写一个脚本，完成如下功能 (1) 传递一个磁盘设备文件路径给脚本，判断此设备是否存在； (2) 如果存在，则显示此设备上的所有分区信息； 1234567891011[root@centos script]# cat week9_title3.sh #!/bin/bash#Author Jerry#[ $# -lt 1 ] &amp;&amp; echo \"please atleast input on\"if [ -b $1 ];then fdisk -l $1else echo \"nothing\"fi ​ 4、写一个脚本，完成如下功能, 脚本能够接受一个参数； (1) 如果参数1为quit，则显示退出脚本，并执行正常退出； (2) 如果参数1为yes，则显示继续执行脚本； (3) 否则，参数1为其它任意值，均执行非正常退出； 1234567891011121314151617181920212223242526272829303132333435[root@centos script]# bash week9_title4.sh please input one atleasterror!!!!![root@centos script]# bash week9_title4.sh quitexit....[root@centos script]# bash week9_title4.sh yesgo!go! go! [root@centos script]# echo $?0[root@centos script]# [root@centos script]# cat week9_title4.sh #!/bin/bash#Author Jerry#[ $# -eq 0 ] &amp;&amp; echo \"please input one atleast\"case $1 inyes) echo \"go!go! go! \";; quit) echo \"exit....\" exit 0;;*) echo \"error!!!!!\" exit 2;;esac[root@centos script]# 5、写一个脚本，完成如下功能 传递一个参数给脚本，此参数为gzip、bzip2或者xz三者之一； (1) 如果参数1的值为gzip，则使用tar和gzip归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20160613.tar.gz； (2) 如果参数1的值为bzip2，则使用tar和bzip2归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20160613.tar.bz2； (3) 如果参数1的值为xz，则使用tar和xz归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20160613.tar.xz； (4) 其它任意值，则显示错误压缩工具，并执行非正常退出； ​ 12345678910111213141516171819202122232425[root@www /]# cat /script/week9_title5.sh #!/bin/bash if [ $# -eq 0 ];then echo \"give me a argument,the argument is gzip bzip2 xz \" exit 19 fi mkdir /backups &amp;&gt; /dev/null case $1 in gzip) tar -zcvf /backups/etc-`date +%Y%m%d`.tar.gz /etc ;; bzip2) tar -jvf /backups/etc-`date +%Y%m%d`.tar.bz2 /etc ;; xz) tar -Jvf /backups/etc-`date +%Y%m%d`.tar.xz /etc ;; *) echo \"error!!!\" ;; esac[root@www /]# 6、写一个脚本，接受一个路径参数： (1) 如果为普通文件，则说明其可被正常访问； (2) 如果是目录文件，则说明可对其使用cd命令； (3) 如果为符号链接文件，则说明是个访问路径； (4) 其它为无法判断； 1234567891011121314151617181920212223242526[root@www script]# cat week9_title6.sh #!/bin/bash#Author Jerry##Check whether the user is to script a path parameter[ $# -lt 1 ] &amp;&amp; echo \"Please give a path to the script parameters\"if [ -f $1 ]; then echo \"这是一个普通文件，可以被正常访问\"elif [ -d $1 ];then echo \"这是一个目录文件，可以使用cd命令\"elif [ -h $1 ];then echo \"这是一个符号链接文件，它是一个访问路径\"elif [ ! -h $1 ] &amp;&amp; [ ! -d $1 ] &amp;&amp; [ ! -f $1 ];then echo \"这是什么鬼，不想跟你说话并向你扔了一只狗！！！\" exitfi 7、写一个脚本，取得当前主机的主机名，判断 (1) 如果主机名为空或为localhost，或为””(none)””，则将其命名为mail.magedu.com； (2) 否则，显示现有的主机名即可； 1234567#!/bin/bashhostname=$(hostname)if [ -z \"$hostname\" -o \"$hostname\" == \"localhost\" -o \"$hostname\" == \"none\" ];then hostname mail.magedu.comelse echo \"$hostname\"fi 8、写一脚本，接受一个用户名为参数； (1) 如果用户的id号为0,则显示其为管理员； (2) 如果用户的id号大于0且小于500, 则显示其为系统用户； (3) 否则，则显示其为普通用户； 12345678910111213#!/bin/bashif [ $# -eq 0 ];then echo \"input argu\" exit 1fi userid=$(id -u)if [ $userid -eq 0 ];then echo \"admin\"elif [ $userid -gt 0 -a $userid -lt 500 ];then echo \"system\"else echo \"user\"fi 10、写一个脚本，传递一个用户名参数给脚本； (1) 如果用户的id号大于等于500，且其默认shell为以sh结尾的字符串，则显示“a user can log system.”类的字符串； (2) 否则，则显示无法登录系统； 1234567891011#!/bin/bashif [ $# -eq 0 ];then echo \"input argu\" exit 1fi userid=grep ^$1 /etc/passwd | grep sh$ | cut -d: -f3if [ $userid -ge 500 ];then echo \" a user can log system\"else echo \"nologin\"fi 11、写一个脚本，完成如下任务 ： (1) 按顺序分别复制/var/log目录下的每个直接文件或子目录至/tmp/test1-testn目录中； (2) 复制目录时，才使用cp -r命令； (3) 复制文件时使用cp命令； (4) 复制链接文件时使用cp -d命令； (5) 余下的所有类型，使用cp -a命令；” 123456789101112#!/bin/bashfor i in 'ls /var/log';do if [ -d $i ];then cp -r /var/log/$i /tmp/test/test1-testn/$i elif [ -f $i ];then cp /var/log/$i /tmp/test/test1-testn/$i elif [ -L $i ];then cp -d /var/log/$i /tmp/test/test1-testn/$i else cp -a /var/log/$i /tpm/test/test1-testn/$i fidone","categories":[],"tags":[]},{"title":"OSI七层模型及脚本小工具","slug":"脚本小工具","date":"2018-08-02T09:33:00.000Z","updated":"2018-08-02T09:35:24.778Z","comments":true,"path":"2018/08/02/脚本小工具/","link":"","permalink":"https://zhusas.github.io/2018/08/02/脚本小工具/","excerpt":"网桥、集线器、二层交换机、三层交换机、路由器的功能、使用场景与区别。集线器是属于物理层的设备，可以理解为一根网线中间串接出了多个接口，这么多接口共享这一根网线的带宽，因此这些接口上的设备在使得网络时就会出现冲突，或者‘道路’挤占的情况。（所有的设备在一个广播域，冲突域中），集线器现在很少使用了。 交换机、网桥都是数据链路层的设备，网桥的出现就是为了解决集线器多个接口共处于一个冲突域的问题，网桥具有2个接口，且每个接口设备发送接收数据都是独立的互不影响（每个接口是一个冲突域）。现在这种设备不再使用。交换机可以理解为是一个多接口的网桥，当然具备了网桥分割冲突的功能（每个接口是一个冲突域）。但是交换机（2层交换机）所有接口都在一个广播域中。 路由器属于网络层设备，路由器不但可以隔离冲突域，同时也可以隔离广播。每个接口是一个冲突域，一个广播域。路由器对于广播数据包不做转发。路由器根据3层地址（现用的IP地址）进行转发数据包到相应的接口。实现不同的IP网段互相通讯。 二层交换机属数据链路层设备，可以识别数据包中的MAC地址信息，根据MAC地址进行转发，并将这些MAC地址与对应的端口记录在自己内部的一个地址表中。","text":"网桥、集线器、二层交换机、三层交换机、路由器的功能、使用场景与区别。集线器是属于物理层的设备，可以理解为一根网线中间串接出了多个接口，这么多接口共享这一根网线的带宽，因此这些接口上的设备在使得网络时就会出现冲突，或者‘道路’挤占的情况。（所有的设备在一个广播域，冲突域中），集线器现在很少使用了。 交换机、网桥都是数据链路层的设备，网桥的出现就是为了解决集线器多个接口共处于一个冲突域的问题，网桥具有2个接口，且每个接口设备发送接收数据都是独立的互不影响（每个接口是一个冲突域）。现在这种设备不再使用。交换机可以理解为是一个多接口的网桥，当然具备了网桥分割冲突的功能（每个接口是一个冲突域）。但是交换机（2层交换机）所有接口都在一个广播域中。 路由器属于网络层设备，路由器不但可以隔离冲突域，同时也可以隔离广播。每个接口是一个冲突域，一个广播域。路由器对于广播数据包不做转发。路由器根据3层地址（现用的IP地址）进行转发数据包到相应的接口。实现不同的IP网段互相通讯。 二层交换机属数据链路层设备，可以识别数据包中的MAC地址信息，根据MAC地址进行转发，并将这些MAC地址与对应的端口记录在自己内部的一个地址表中。 三层交换机就是具有部分路由器功能的交换机，三层交换机的最重要目的是加快大型局域网内部的数据交换，所具有的路由功能也是为这目的服务的，能够做到一次路由，多次转发。对于数据包转发等规律性的过程由硬件高速实现，而像路由信息更新、路由表维护、路由计算、路由确定等功能，由软件实现。三层交换技术就是二层交换技术+三层转发技术。传统交换技术是在OSI网络标准模型第二层–数据链路层进行操作的，而三层交换技术是在网络模型中的第三层实现了数据包的高速转发，既可实现网络路由功能，又可根据不同网络状况做到最优网络性能。 IP地址的分类及子网掩码的表示形式及其作用IP地址分类 一般分类是指ipv4,IP地址有5类，A类到E类，各用在不同类型的网络中。地址分类反映了网络的大小以及数据包是单播还是组播的。 A类到C类地址用于单点编址方法，但每一类代表着不同的网络大小。A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。 B类地址（128.0.0.0-191.255.255.25 5）用于中型网络，节点数可达65,536个。 C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。 D类地址并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订阅成员组成。D类地址的范围为224.0.0.0-239.255.255.255。 E类（240.0.0.0-255.255.255.254）地址用于试验。 作用 子网掩码是一个32位地址，是与IP地址结合使用的一种技术。 它的主要作用有两个，一是用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。二是用于将一个大的IP网络划分为若干小的子网络。 使用子网是为了减少IP的浪费。因为随着互联网的发展，越来越多的网络产生，有的网络多则几百台，有的只有区区几台，这样就浪费了很多IP地址，所以要划分子网。使用子网可以提高网络应用的效率。 通过IP 地址的二进制与子网掩码的二进制进行与运算，确定某个设备的网络地址和主机号，也就是说通过子网掩码分辨一个网络的网络部分和主机部分。 子网掩码一旦设置，网络地址和主机地址就固定了。子网一个最显著的特征就是具有子网掩码。与IP地址相同，子网掩码的长度也是32位，也可以使用十进制的形式。例如，为二进制形式的子网掩码：1111 1111.1111 1111.1111 1111.0000 0000，采用十进制的形式为：255.255.255.0。 通过计算机的子网掩码判断两台计算机是否属于同一网段的方法是，将计算机十进制的IP地址和子网掩码转换为二进制的形式，然后进行二进制“与”(AND)计算（全1则得1，不全1则得0），如果得出的结果是相同的，那么这两台计算机就属于同一网段。 子网掩码表现形式 IP标识法一个完整IP描述包含IP 地址和子网掩码 具体标识有两种 点分十进制192.168.0.n 255.255.255.0（点分十进制） 这种暂时成为简写吧，懒人写法192.168.0.n/24 （/24表示子网掩码二进制标识法中前面24位1） 计算机网络的分层模型（OSI模型和TCP/IP模型）及每一层的功能及涉及到的物理设备有哪些。OSI模型 常见对应各层的设备 物理层：网卡，网线，集线器，中继器，调制解调器 数据链路层：网桥，交换机 网络层：路由器 网关工作在第四层传输层及其以上 物理层在OSI参考模型中，物理层（Physical Layer）是参考模型的最低层，也是OSI模型的第一层。 物理层的主要功能是：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。 数据链路层数据链路层（Data Link Layer）是OSI模型的第二层，负责建立和管理节点间的链路。该层的主要功能是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。在计算机网络中由于各种干扰的存在，物理链路是不可靠的。因此，这一层的主要功能是在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。 该层通常又被分为介质访问控制（MAC）和逻辑链路控制（LLC）两个子层。 1、MAC子层的主要任务是解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制； 2、LC子层的主要任务是建立和维护网络连接，执行差错校验、流量控制和链路控制。 数据链路层的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层；并且，还负责处理接收端发回的确认帧的信息，以便提供可靠的数据传输。 网络层网络层（Network Layer）是OSI模型的第三层，它是OSI参考模型中最复杂的一层，也是通信子网的最高一层。它在下两层的基础上向资源子网提供服务。其主要任务是：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。该层控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。一般地，数据链路层是解决同一网络内节点之间的通信，而网络层主要解决不同子网间的通信。例如在广域网之间通信时，必然会遇到路由（即两节点间可能有多条路径）选择问题。 在实现网络层功能时，需要解决的主要问题如下：寻址：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一个唯一的地址。由于各子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）。 交换：规定不同的信息交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者又包括报文交换技术和分组交换技术。 路由算法：当源节点和目的节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径由发送端传送到接收端。 连接服务：与数据链路层流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测。 传输层OSI下3层的主要任务是数据通信，上3层的任务是数据处理。而传输层（Transport Layer）是OSI模型的第4层。因此该层是通信子网和资源子网的接口和桥梁，起到承上启下的作用。 该层的主要任务是：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。传输层的作用是向高层屏蔽下层数据通信的细节，即向用户透明地传送报文。该层常见的协议：TCP/IP中的TCP协议、Novell网络中的SPX协议和微软的NetBIOS/NetBEUI协议。 传输层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时，对数据进行分割。然后，传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层。因此，传输层负责提供两节点之间数据的可靠传送，当两节点的联系确定之后，传输层则负责监督工作。 综上，传输层的主要功能如下：传输连接管理：提供建立、维护和拆除传输连接的功能。传输层在网络层的基础上为高层提供“面向连接”和“面向无接连”的两种服务。 处理传输差错：提供可靠的“面向连接”和不太可靠的“面向无连接”的数据传输服务、差错控制和流量控制。在提供“面向连接”服务时，通过这一层传输的数据将由目标设备确认，如果在指定的时间内未收到确认信息，数据将被重发，监控服务质量。 会话层会话层（Session Layer）是OSI模型的第5层，是用户应用程序和网络之间的接口，主要任务是：向两个实体的表示层提供建立和使用连接的方法。将不同实体之间的表示层的连接称为会话。因此会话层的任务就是组织和协调两个会话进程之间的通信，并对数据交换进行管理。用户可以按照半双工、单工和全双工的方式建立会话。当建立会话时，用户必须提供他们想要连接的远程地址。而这些地址与MAC（介质访问控制子层）地址或网络层的逻辑地址不同，它们是为用户专门设计的，更便于用户记忆。域名（DN）就是一种网络上使用的远程地址例如：www.163.com就是一个域名。 会话层的具体功能如下： 会话管理：允许用户在两个实体设备之间建立、维持和终止会话，并支持它们之间的数据交换。例如提供单方向会话或双向同时会话，并管理会话中的发送顺序，以及会话所占用时间的长短。 会话流量控制：提供会话流量控制和交叉会话功能。 寻址：使用远程地址建立会话连接。 出错控制：从逻辑上讲会话层主要负责数据交换的建立、保持和终止，但实际的工作却是接收来自传输层的数据，并负责纠正错误。会话控制和远程过程调用均属于这一层的功能。但应注意，此层检查的错误不是通信介质的错误，而是磁盘空间、打印机缺纸等类型的高级错误。 表示层表示层（Presentation Layer）是OSI模型的第六层，它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。其主要功能是“处理用户信息的表示问题，如编码、数据格式转换和加密解密”等。 表示层的具体功能如下： 数据格式处理：协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异。 数据的编码：处理字符集和数字的转换。例如由于用户程序中的数据类型（整型或实型、有符号或无符号等）、用户标识等都可以有不同的表示方式，因此，在设备之间需要具有在不同字符集或格式之间转换的功能。 压缩和解压缩：为了减少数据的传输量，这一层还负责数据的压缩与恢复。 数据的加密和解密：可以提高网络的安全性。 应用层应用层（Application Layer）是OSI参考模型的最高层，它是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。它在其他6层工作的基础上，负责完成网络中应用程序与网络操作系统之间的联系，建立与结束使用者之间的联系，并完成网络用户提出的各种网络服务及应用所需的监督、管理和服务等各种协议。此外，该层还负责协调各个应用程序间的工作。应用层为用户提供的服务和协议有：文件服务、目录服务、文件传输服务（FTP）、远程登录服务（Telnet）、电子邮件服务（E-mail）、打印服务、安全服务、网络管理服务、数据库服务等。上述的各种网络服务由该层的不同应用协议和程序完成，不同的网络操作系统之间在功能、界面、实现技术、对硬件的支持、安全可靠性以及具有的各种应用程序接口等各个方面的差异是很大的。 应用层的主要功能如下： 用户接口：应用层是用户与网络，以及应用程序与网络间的直接接口，使得用户能够与网络进行交互式联系。实现各种服务：该层具有的各种应用程序可以完成和实现用户请求的各种服务。 OSI 7层模型的小结由于OSI是一个理想的模型，因此一般网络系统只涉及其中的几层，很少有系统能够具有所有的7层，并完全遵循它的规定。在7层模型中，每一层都提供一个特殊的网络功能。从网络功能的角度观察：下面4层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；第4层作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；而上3层（会话层、表示层和应用层）则以提供用户与应用程序之间的信息和数据处理功能为主。简言之，下4层主要完成通信子网的功能，上3层主要完成资源子网的功能。 TCP/IP模型 TCP/IP模型包括4层： 网络接口层–对应OSI参考模型的物理层和数据链路层； 网络层–对应OSI参考模型的网络层； 运输层–对应OSI参考模型的运输层； 应用层–对应OSI参考模型的5、6、7层。 TCP/IP协议的主要特点如下： 高可靠性 TCP/IP采用重新确认的方法保证数据的可靠传输，并采用“窗口”流量控制机制使可靠性得到进一步保证。 安全性 为建立TCP连接，在连接的每一端都必须与该连接的安全性控制达成一致。IP在它的控制分组头中有若干字段允许有选择地对传输的信息实施保护。 灵活性 TCP/IP要求下层支持该协议，而对上层应用协议不作特殊要求。因此，TCP/IP的使用不受传输介质和网络应用软件的限制。 总结 从网络通信的观点来看，Internet是一个由TCP/IP把各个国家、机构、部门的内部网络连接起来的庞大的数据通信网； 从信息资源的角度来看，Internet是一个集各个领域、部门内各种信息资源，以共享为目的的信息资源网；从技术的角度来看，Internet是一个“不同网络互连的网络（网际网）”,是由许多网络（包括局域网、城域网和广域网）互连形成的。 将Linux主机接入到TCP/IP网络的步骤。（手动指定的方式）我就不瞎BB了，直接上操作步骤，分centos和ubuntu两种操作系统，这是一道送分题。 总体来说有以下几步： 1、配置IP地址和掩码 2、配置网关 3、配置dns的IP地址 CentOS6 1234567891011121314151617vim /etc/sysconfig/network-scripts/ifcfg-eth0TYPE=Ethernet #90%以上都是以太网啦BOOTPROTO=none #如果是自动获取，此处是DHCP，手动指定就是noneIPADDR=192.168.0.243 #修改此处PREFIX=24 #修改此处GATEWAY=192.168.0.1 #修改此处DNS1=202.103.44.150 #修改此处DNS2=202.103.24.68 #修改此处DEFROUTE=yesIPV4_FAILURE_FATAL=yesIPV6INIT=noNAME=eth0UUID=b33d04cb-b415-4874-b5a2-e201bb20b46e #网卡的唯一标识ONBOOT=yes #是否开机启动最后：wq 保存退出， 再执行 service network restart #使其生效 Ubuntu 14.04 123456789101112131415161718192021222324root@ubuntu:~# vim /etc/network/interfaces #配置IP、掩码、网关# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).# The loopback network interfaceauto loiface lo inet loopback# The primary network interfaceauto eth0iface eth0 inet staticaddress 192.168.0.245netmask 255.255.255.0gateway 192.168.0.1root@ubuntu:~# vim /etc/resolvconf/resolv.conf.d/base #配置DNSnameserver 202.103.24.68nameserver 202.103.44.150最后：wq 保存退出root@ubuntu:~# service networking restart #使其生效 ​ 为Linux主机配置网络信息的方式方法一：使用ifconfig或者ip 临时添加网络信息，并使用route命令添加默认网关 123456789101112131415161718192021**注意：所有操作均使用root用户**修改IP：ifconfig eth0 192.168.0.66则直接将第一张网卡的IP修改成192.168.0.66增加IP：ifconfig eth0 add 192.168.2.77 #增加一个IPifconfig eth0:0 broadcast 192.168.2.255 ##修改刚刚增加IP的广播地址再增加一个IP：ifconfig eth0:0 add 10.10.44.145ifconfig eth0:0:1 broadcast 10.10.44.255 #修改刚刚增加IP的广播地址上述增加完，立刻生效，但是机器重新启动后，就无效了。route add -net 192.168.0.0/24 gw 192.168.0.1 dev eth1 #增加网关[root@centos ~]# vim /etc/resolv.conf #增加dns[root@centos ~]# cat /etc/resolv.conf #Generated by NetworkManagernameserver 202.103.44.150nameserver 202.103.24.68 ​ 不过这种方法是临时的，服务器一重启就失效了 ​ 方法二：使用修改/etc/sysconfig/network-scripts/ifcfg-IF_NAME文件 1234567891011121314151617181920212223242526272829303132333435363738[root@centos ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0ifcfg-IFACE 配置文件参数：DEVICE：此配置文件对应的设备的名称；ONBOOT：在系统引导过程中，是否激活此接口；UUID：此设备的惟一标识；IPV6INIT：是否初始化 IPv6；BOOTPROTO：激活此接口时使用什么协议来配置接口属性，常用的有 dhcp、bootp、static、none；TYPE：接口类型，常见的有 Ethernet, Bridge；DNS1：第一 DNS 服务器指向；DNS2：备用 DNS 服务器指向；DOMAIN：DNS 搜索域；IPADDR： IP 地址；NETMASK：子网掩码；CentOS 7 支持使用 PREFIX 以长度方式指明子网掩码；GATEWAY：默认网关；USERCTL：是否允许普通用户控制此设备；PEERDNS：如果 BOOTPROTO 的值为“dhcp”，是否允许 dhcp server 分配的 dns 服务器指向覆盖本地手动指定的 DNS 服务器指向；默认为允许；HWADDR：设备的 MAC 地址； [root@centos ~]# cat /etc/resolv.conf #示例# Generated by NetworkManagernameserver 202.103.44.150nameserver 202.103.24.68[root@centos ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 TYPE=EthernetBOOTPROTO=noneIPADDR=192.168.0.243PREFIX=24GATEWAY=192.168.0.1DNS1=202.103.44.150DNS2=202.103.24.68DEFROUTE=yesIPV4_FAILURE_FATAL=yesIPV6INIT=noNAME=eth0UUID=b33d04cb-b415-4874-b5a2-e201bb20b46eONBOOT=yes 一般最常用的就是这两种了。 用ping命令探测172.16.250.1-172.16.250.254之间的所有主机的在线状态；在线的主机使用绿色显示；不在线的主使用红色显示一开始我很茫然，无从下手，用for循环，记得for循环大了会占用内存空间，例如ping B类局域网地址的话，就想着不用for，用while或者until实现可否，折腾了一天多的时间（处女座作的），精益求精，经过N次死循环及失败，于是有了下面的脚本: 123456789101112131415161718[root@centos Jerry_go]# wc -l ping4.sh 14 ping4.sh[root@centos Jerry_go]# cat ping4.sh #!/bin/sh#ping IP#Author Jerryip=0while [ $ip -lt 254 ];do ip=$[$ip+1] ping -c 2 192.168.0.$ip &gt;&gt; /dev/null if [ $? == 0 ];then echo -e \"\\e[1;32m 192.168.0.$ip ok \\e[0m\" &amp;&amp; continue else echo -e \"\\e[1;31m 192.168.0.$ip no response \\e[0m\" &amp;&amp; continue fidone[root@centos Jerry_go]# 执行效果： 用for实现 1234567891011121314[root@centos Jerry_go]# cat ping.sh #!/bin/bash#ping ip#Author Jerryfor ((i=1;i&lt;255;i++));do ping -w 1 -c 1 172.16.250.$i &amp;&gt;/dev/null if [ $? -eq 0 ];then echo -e \"\\e[1;32m 172.16.250.$i ok \\e[0m\" else echo -e \"\\e[1;31m 172.16.250.$i no response \\e[0m\" fidone[root@centos Jerry_go]# 经测试效果一样 描述每个网络接口的配置文件中各个参数的含义和其所对应的值123456789101112131415161718ifcfg-IFACE配置文件参数： DEVICE：此配置文件对应的设备的名称； ONBOOT：在系统引导过程中，是否激活此接口； UUID：此设备的惟一标识； IPV6INIT：是否初始化IPv6； BOOTPROTO：激活此接口时使用什么协议来配置接口属性，常用的有dhcp、bootp、static、none； TYPE：接口类型，常见的有Ethernet, Bridge； DNS1：第一DNS服务器指向； DNS2：备用DNS服务器指向； DOMAIN：DNS搜索域； IPADDR： IP地址； NETMASK：子网掩码；CentOS 7支持使用PREFIX以长度方式指明子网掩码； GATEWAY：默认网关； USERCTL：是否允许普通用户控制此设备； PEERDNS：如果BOOTPROTO的值为“dhcp”，是否允许dhcp server分配的dns服务器指向覆盖本地手动指定的DNS服务器指向；默认为允许； HWADDR：设备的MAC地址； NM_CONTROLLED：是否使用NetworkManager服务来控制接口； 给网络接口配置多个地址，有哪些方式？这个也分快捷跟永久两种方式。主要用到ifconfig 快捷方式呢，即生效，如下： 12345678910111213141516171819202122232425262728293031323334353637[root@centos ~]# ifconfig eth0:0 192.168.3.243 netmask 255.255.255.0 up [root@centos ~]# ifconfig eth0:1 192.168.3.2 netmask 255.255.255.0 up [root@centos ~]# ip addr show #查看网卡IP地址方法一1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:04:bd:c1 brd ff:ff:ff:ff:ff:ff inet 192.168.0.243/24 brd 192.168.0.255 scope global eth0 inet 192.168.3.243/24 brd 192.168.3.255 scope global eth0:0 inet 192.168.3.2/24 brd 192.168.3.255 scope global secondary eth0:1[root@centos ~]# ifconfig #查看网卡IP地址方法二eth0 Link encap:Ethernet HWaddr 00:0C:29:04:BD:C1 inet addr:192.168.0.243 Bcast:192.168.0.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8122248 errors:0 dropped:0 overruns:0 frame:0 TX packets:51751 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:526472342 (502.0 MiB) TX bytes:3884350 (3.7 MiB)eth0:0 Link encap:Ethernet HWaddr 00:0C:29:04:BD:C1 inet addr:192.168.3.243 Bcast:192.168.3.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1eth0:1 Link encap:Ethernet HWaddr 00:0C:29:04:BD:C1 inet addr:192.168.3.2 Bcast:192.168.3.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:290 errors:0 dropped:0 overruns:0 frame:0 TX packets:290 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:26660 (26.0 KiB) TX bytes:26660 (26.0 KiB)[root@centos ~]# 永久方式呢，稍微麻烦点，不过永久嘛，一劳永逸，值得 是仿照/etc/sysconfig/network-scripts/ifcfg-eth0增加一文件根据网络虚拟接口的名字进行命名例如ifcfg-eth0:0或者ifcfg-eth0:1等等 开始飙车了啊，系好安全带！ [root@centos ~]# cd /etc/sysconfig/network-scripts/ [root@centos network-scripts]# cp ifcfg-eth0 ifcfg-eth0:0 [root@centos network-scripts]# vim ifcfg-eth0:0 保存退出，重启系统，再看。应该是没问题的啦。 常用的网络管理类工具及使用方法。ifconfig命令:接口及地址查看和管理 可以使用ifconfig命令配置网卡属性,设置后立即生效，重启后失效。 显示活动接口信息 ifconfig eth0 显示所有接口信息 ifconfig -a 启用或禁用给定接口 ifconfig eth0 up/down 设置IP地址及掩码 ifconfig eth0 172.168.1.100/24 route命令：路由查看及管理 添加主机路由 route add -host 192.168.1.3 gw 172.16.0.1 dev eth0 添加网络路由 route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0 添加默认路由 route add default gw 172.16.0.1 删除主机路由 route del -host 192.168.1.3 删除网络路由 route del -net 192.168.0.0 netmask 255.255.255.0 netstat命令:打印网络连接，路由表，接口统计信息 以数字形式显示TCP协议相关所有状态 netstat -tan 以数字形式显示UDP协议相关所有状态 netstat -uan 以数字形式显示TCP协议相关的监听状态 netstat -tnl 以数字形式显示UDP协议相关的监听状态 netstat -unl 显示内核路由表 netstat -r 显示所有接口统计数据 netstat -i 显示指定接口信息 netstat -I eth0 dig命令:解析DNS地址工具 正解DNS 域名至IP地址 dig -t A www.magedu.com 反解DNS IP地址至域名 dig -x 127.0.0.1 ip命令:显示/操纵路由，设备，策略路由和隧道 禁用接口 ip link set dev eth0 down 启用接口 ip link set dev eth0 up 显示接口信息 ip link show dev eth0 显示主地址 ip addr show dev eth0 primary 显示次地址 ip addr show dev eth0 secondary 添加IP地址 ip addr add 172.16.100.13/16 dev eth0 添加网卡别名 ip addr add 172.16.100.13/16 dev eth0 label ‘eth:0’ 删除别名 ip addr flush dev eth0 label ‘eth0:0’ 添加主路由 ip route add 192.168.1.3 via 172.16.0.1 dev eth0 添加网络路由 ip route add 192.168.0.0/16 via 172.16.0.1 dev eth0 添加默认路由 ip route add default via 127.16.0.1 删除路由 ip route del 192.168.1.3 查看路由 ip route show 清空路由 ip route flush dev eth0 ss命令:显示网络连接工具参数用法同netstat 指定显示某种状态ss -t state established ‘( dport = :ssh or sport = :ssh )’ Linux系统软件包管理方法（安装、升级、卸载等操作）Linux的软件系统包管理那就好玩了，根据这多年的使用经验，主要分为yum和apt两大系列， Debian 及其衍生产品如：Ubuntu、Linux Mint 和 Raspbian 的包格式为.deb文件，APT 是最常见包操作命令，可：搜索库、安装包及其依赖和管理升级,而要直接安装现成.deb包时需要使用dpkg命令。 APT还自吹有超级牛力，有图有真相: CentOS、Fedora 及 Red Hat 系列 Linux 使用RPM包文件，并使用yum命令管理包文件及与软件库交互。在最新的 Fedora 版本中，yum命令已被dnf取代进行包管理,而要直接安装现成.rpm包时需要使用rpm命令。 好嘛，都是利器啊。下边且看我分解。 RPM 包的安装 / 升级 / 查询 / 卸载一个 RPM 包包含了已压缩的软件文件集以及该软件的内容信息（在头文件中保存），通常表现为以 .rpm 扩展名结尾的文件，例如 package.rpm 。对其操作，需要使用 rpm 命令。下面介绍 rpm 工具的参数和使用方法。 RPM 命令常用参数 RPM 的常规使用方法为 rpm -参数 package.rpm ( 更多信息，请查阅帮助 $man rpm)： -q 在系统中查询软件或查询指定 rpm 包的内容信息 -i 在系统中安装软件 -U 在系统中升级软件 -e 在系统中卸载软件 -h 用 #(hash) 符显示 rpm 安装过程 -v 详述安装过程 -p 表明对 RPM 包进行查询，通常和其它参数同时使用，如：-qlp 查询某个 RPM 包中的所有文件列表-qip 查询某个 RPM 包的内容信息 RPM 命令参数使用方法以上参数有些需要组合使用，比如说 rpm -h package.rpm 是没有意义的，但 rpm -ih package.rpm 即表示安装 package 并用 # 符显示安装进度。 安装 RPM 包 rpm -ivh package.rpm 升级 RPM 包命令 rpm -Uvh package.rpm 卸载 RPM 包命令 rpm -ev package 查询 RPM 包中包含的文件列表命令 rpm -qlp package 查询 RPM 包中包含的文件列表命令 rpm -qlp package 查询 RPM 包中包含的内容信息命令 rpm -qip package 查询系统中所有已安装 RPM 包 rpm -qa DEB 包的安装 / 升级 / 查询 / 卸载一个 DEB 包包含了已压缩的软件文件集以及该软件的内容信息（在头文件中保存），通常表现为以 .deb 扩展名结尾的文件，例如 package.deb 。对其操作，需要使用 dpkg 命令。下面介绍 dpkg 工具的参数和使用方法，并以 IBM Lotus Notes 在 UBUNTU 904 安装为例做具体说明。 DPKG 命令常用参数 DPKG 的常规使用方法为 dpkg -参数 Package(.rpm),( 更多信息，请查阅帮助 $man rpm) -l 在系统中查询软件内容信息 –info 在系统中查询软件或查询指定 rpm 包的内容信息 -i 在系统中安装 / 升级软件 -r 在系统中卸载软件 , 不删除配置文件 -P 在系统中卸载软件以及其配置文件 DPKG 命令参数使用方法 安装 DEB 包命令 dpkg -i package.deb 升级 DEB 包命令 dpkg -i package.deb ( 和安装命令相同） 卸载 DEB 包命令 dpkg -r package.deb # 不卸载配置文件或 dpkg -P package.deb # 卸载配置文件 查询 DEB 包中包含的文件列表命令 dpkg-deb -c package.deb 查询 DEB 包中包含的内容信息命令 dpkg –info package.deb 查询系统中所有已安装 DEB 包 dpkg -l package YUM/APT大多数 Linux 都使用本地数据库来存储远程可用的包仓库列表，所以在安装或升级包之前最好更新一下这个数据库。 Debian/Ubuntu sudo apt-get update CentOS yum check-update Fedora dnf check-update 升级已安装的包 Debian/Ubuntu sudo apt-get upgrade #仅升级已安装的软件包 sudo apt-get dist-upgrade #可添加或删除程序包，以满足新的依赖。 CentOS sudo yum update Fedora sudo dnf upgrade 查找/搜索软件包 Debian/Ubuntuapt-cache search #搜索内容 CentOSyum search #搜索内容yum search all #搜索内容 搜索所有内容，包括包描述。 Fedoradnf search #搜索内容dnf search all #搜索内容 搜索所有内容，包括包描述。 查看某个软件包信息 Debian/Ubuntu apt-cache show 包名 #显示有关软件包的本地缓存信息 dpkg -s 包名 #显示包的当前安装状态 CentOS yum info 包名 yum deplist 包名 #列出包的以来 Fedoradnf info 包名dnf repoquery –requires 包名 #列出包的以来 从软件仓库安装包 一旦我们知道某个软件包的名称之后，便可以使用如下命令从软件仓库安装包。 Debian/Ubuntu sudo apt-get install 包名sudo apt-get install 包1 包2 … #安装所有列出的包sudo apt-get install -y 包名 #无需提示直接安装 CentOSsudo yum install 包名sudo yum install 包1 包2 … #安装所有列出的包sudo yum install -y 包名 #无需提示直接安装 Fedorasudo dnf install 包名sudo dnf install 包1 包2 … #安装所有列出的包sudo dnf install -y 包名 #无需提示直接安装 使用发行版光盘作为yum repository1、将主机base源及media源备份并将media源切换至iso mount目录 1234[root@centos /]# cd /etc/yum.repos.d[root@centos yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak[root@centos yum.repos.d]# cp CentOS-Media.repo CentOS-Media.repo.bak[root@centos yum.repos.d]# vim CentOS-Media.repo 2、将iso光盘插入光驱或将iso包挂载到机器中（本次测试直接将iso挂载到虚拟机centos中） 123[root@centos /]# mkdir /media/CentOS #建立光盘挂载目录 ，其实就是跟CentOS-Media.repo里面默认的一样啦[root@centos dev]# mount /dev/sr0 /media/CentOS/ #挂载光盘 3、测试安装policycoreutils-python 先清空yum的缓存，再重建yum缓存，看看从光盘的yum repository能否正常读取。 貌似是OK的。 再来一发 大功告成！ 完成以下功能 (1) 假设某目录(/etc/rc.d/rc3.d/)下分别有K开头的文件和S开头的文件若干； (2) 显示所有以K开头的文件的文件名，并且给其附加一个stop字符串； (3) 显示所有以S开头的文件的文件名，并且给其附加一个start字符串； (4) 分别统计S开头和K开头的文件各有多少； 123456789101112131415161718192021#!/bin/bash##定义统计文件个数的变量，初始化啦filename_S_sum=0filename_K_sum=0#利用for循环列表支持文件路径*通配S开头的文件for filename_S in /etc/rc.d/rc3.d/S*;do echo $(basename $filename_S) start let filename_S_sum++done#利用for循环列表支持文件路径*通配S开头的文件for filename_K in /etc/rc.d/rc3.d/K*;do echo $(basename $filename_K) stop let filename_K_sum++doneecho \"There is $filename_S_sum files by S At the beginning of the file name\"echo \"There is $filename_K_sum files by K At the beginning of the file name\" ​ 1234567891011121314151617181920212223242526272829303132333435363738394041[root@centos Jerry_go]# bash week8_title12-2.sh &gt; week8_title12-2.txt &amp;&amp; cat week8_title12-2.txt S01sysstat startS02lvm2-monitor startS10network startS11portreserve startS12rsyslog startS22messagebus startS23NetworkManager startS25blk-availability startS26haldaemon startS26udev-post startS55memcached startS55sshd startS58ntpd startS90crond startS95atd startS99local startK01smartd stopK05wdaemon stopK10psacct stopK10saslauthd stopK16abrt-ccpp stopK16abrtd stopK30spice-vdagentd stopK50kdump stopK61nfs-rdma stopK75netfs stopK75ntpdate stopK75quota_nld stopK84wpa_supplicant stopK87restorecond stopK88auditd stopK89netconsole stopK89rdisc stopK92ip6tables stopK92iptables stopK95firstboot stopK95rdma stopK99rngd stopThere is 16 files by S At the beginning of the file nameThere is 22 files by K At the beginning of the file name 完成以下功能 (1) 脚本能接受用户名作为参数； (2) 计算此些用户的ID之和； 1234567891011121314151617[root@centos Jerry_go]# cat week8_title13.sh #开始装逼#!/bin/bash#[ $# -lt 1 ] &amp;&amp; echo “At least input one users name ” &amp;&amp; exit 1 #提前判断一下，最少输入一个脚本参数并提示用户userid_sum=0 #初始化userid_sum变量for user in $*;do #开始用for循环，$*参数表示读取脚本后的任意个参数作为循环列表 if id $user &amp;&gt; /dev/null;then #判断一下用户是否存在 echo \"$user userid is $(id -u $user)\" #显示每次循环的当前系统用户的ID let userid_sum+=$(id -u $user) #变量自增 else echo \"$user is not an existing user\" #如果用户不存在，输出提示给用户 fidoneecho \"They're userid sum is $userid_sum\" #输出用户ID的总和 ​ 12345678[root@centos Jerry_go]# bash week8_title13.sh root bin jerry sshd FBIroot userid is 0bin userid is 1jerry userid is 500sshd userid is 74FBI is not an existing userThey're userid sum is 575[root@centos Jerry_go]# (1) 传递一些目录给此脚本； (2) 逐个显示每个目录的所有一级文件或子目录的内容类型； (3) 统计一共有多少个目录；且一共显示了多少个文件的内容类型； 123456789101112131415161718192021222324[root@centos Jerry_go]# cat week8_title14.sh #!/bin/bash#Author Jerry##Not less than one script parameters[ $# -lt 1 ] &amp;&amp; echo \"please aleast input one directory\" &amp;&amp; exit 1#Judge whether the script parameters of the input from the user directory[ -d $* ] || echo \"Please enter the directory!!!\" dsum=0fsum=0for file_name in $1;do ls -l $* |awk '&#123;print $NF&#125;' let dsum+=$(ls -l $* |grep ^d |wc -l) let fsum+=$(ls -l $* |grep -v ^d |wc -l) shift break doneecho \"the directories sum:$dsum\"echo \"the file sum:$fsum\" ​ 写一个脚本 通过命令行传递一个参数给脚本，参数为用户名 如果用户的id号大于等于500，则显示此用户为普通用户； 123456789[root@centos jerry_go]# cat week8_title14.sh #!/bin/bash#Determine the user's inputgrep \"^$1\\&gt;\" /etc/passwd &amp;&gt; /dev/null || echo \"Please enter a user name\" userid=$(id -u $1)[ $userid -ge 500 ] &amp;&amp; echo \"This is a common user,it's userid is $userid \" || echo \"This is a system user,it's userid is $userid \" 写一个脚本 (1) 添加10用户user1-user10；密码同用户名； (2) 用户不存在时才添加；存在时则跳过； (3) 最后显示本次共添加了多少用户； 12345678910#!/bin/bashdeclare -i numfor((i=1;i&lt;11;i++))&#123; if ! id user$i &amp;&gt; /dev/null;then useradd user$i echo user$i:user$i | chpasswd let num++ fi&#125;echo \"Add $num users!\" 用ping命令测试172.16.250.20-172.16.250.100以内有哪些主机在线，将在线的显示出来； 12345678#!/bin/bashnet=\"172.16.250.\"for((i=20;i&lt;=100;i++))&#123; ping -c 1 $net$i &amp;&gt; /dev/null if [ $? -eq 0 ];then echo $net$i fi&#125; 打印九九乘法表； 12345678910111213141516171819[root@centos jerry_go]# bash week8_title18.sh 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 [root@centos jerry_go]# cat week8_title18.sh #!/bin/bashfor ((i=1;i&lt;=9;i++))&#123; for((j=1;j&lt;=i;j++));do echo -e -n \"$j*$i=$(($i*$j))\\t\" done echo &#125;","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://zhusas.github.io/tags/shell/"}]},{"title":"脚本又见脚本","slug":"脚本又见脚本","date":"2018-08-02T09:07:00.000Z","updated":"2018-08-02T09:09:16.508Z","comments":true,"path":"2018/08/02/脚本又见脚本/","link":"","permalink":"https://zhusas.github.io/2018/08/02/脚本又见脚本/","excerpt":"创建一个10G分区，并格式为ext4文件系统； (1) 要求其block大小为2048, 预留空间百分比为2, 卷标为MYDATA, 默认挂载属性包含acl； (2) 挂载至/data/mydata目录，要求挂载时禁止程序自动运行，且不更新文件的访问时间戳；","text":"创建一个10G分区，并格式为ext4文件系统； (1) 要求其block大小为2048, 预留空间百分比为2, 卷标为MYDATA, 默认挂载属性包含acl； (2) 挂载至/data/mydata目录，要求挂载时禁止程序自动运行，且不更新文件的访问时间戳； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[root@centos ~]# fdisk -l #不写注释的都是耍流氓Disk /dev/sda: 171.8 GB, 171798691840 bytes255 heads, 63 sectors/track, 20886 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00098b32 Device Boot Start End Blocks Id System/dev/sda1 * 1 64 512000 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 64 20887 167259136 8e Linux LVMDisk /dev/sdb: 10.7 GB, 10737418240 bytes #创建一个10G分区255 heads, 63 sectors/track, 1305 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 Disk /dev/mapper/vg_centos-lv_root: 170.2 GB, 170196467712 bytes255 heads, 63 sectors/track, 20691 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_centos-lv_swap: 1073 MB, 1073741824 bytes255 heads, 63 sectors/track, 130 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000[root@centos ~]# fdisk /dev/sdb Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x248136bc.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won't be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It's strongly recommended to switch off the mode (command 'c') and change display units to sectors (command 'u').Command (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-1305, default 1): Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-1305, default 1305): Using default value 1305Command (m for help): wqThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks.[root@centos ~]# fdisk -lDisk /dev/sda: 171.8 GB, 171798691840 bytes255 heads, 63 sectors/track, 20886 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00098b32 Device Boot Start End Blocks Id System/dev/sda1 * 1 64 512000 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 64 20887 167259136 8e Linux LVMDisk /dev/sdb: 10.7 GB, 10737418240 bytes255 heads, 63 sectors/track, 1305 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x248136bc Device Boot Start End Blocks Id System/dev/sdb1 1 1305 10482381 83 LinuxDisk /dev/mapper/vg_centos-lv_root: 170.2 GB, 170196467712 bytes255 heads, 63 sectors/track, 20691 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/mapper/vg_centos-lv_swap: 1073 MB, 1073741824 bytes255 heads, 63 sectors/track, 130 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@centos ~]# mkfs -b 2048 -t ext4 -L MYDATA -m 2 /dev/sdb1 #格式为ext4文件系统，其block大小为2048, 预留空间百分比为2, 卷标为MYDATAmke2fs 1.41.12 (17-May-2010)文件系统标签=MYDATA操作系统:Linux块大小=2048 (log=1)分块大小=2048 (log=1)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 5241190 blocks262059 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=542113792320 block groups16384 blocks per group, 16384 fragments per group2048 inodes per groupSuperblock backups stored on blocks: 16384, 49152, 81920, 114688, 147456, 409600, 442368, 802816, 1327104, 2048000, 3981312正在写入inode表: 完成 Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 20 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@centos ~]# tune2fs -o acl /dev/sdb1 #默认挂载属性包含acltune2fs 1.41.12 (17-May-2010)[root@centos ~]# mkdir -p /data/mydata &amp;&amp; mount -o noexec,noatime /dev/sdb1 /data/mydata #挂载至/data/mydata目录，要求挂载时禁止程序自动运行，且不更新文件的访问时间戳[root@centos ~]# echo $? 0[root@centos ~]# cd /data/[root@centos data]# ll总用量 2drwxr-xr-x 3 root root 2048 12月 26 17:36 mydata[root@centos data]# cd mydata/[root@centos mydata]# ll总用量 16drwx------ 2 root root 16384 12月 26 17:36 lost+found[root@centos mydata]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/vg_centos-lv_root 156G 3.8G 145G 3% /tmpfs 1.9G 72K 1.9G 1% /dev/shm/dev/sda1 477M 160M 292M 36% /boot/dev/sdb1 9.8G 13M 9.3G 1% /data/mydata[root@centos mydata]# 2、创建一个大小为1G的swap分区，并创建好文件系统，并启用之； 12345678910111213141516171819202122232425262728293031323334353637383940414243[root@centos ~]# fdisk /dev/sdb Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x70af3aab.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won't be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It's strongly recommended to switch off the mode (command 'c') and change display units to sectors (command 'u').Command (m for help): nCommand action e extended p primary partition (1-4)Command action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-130, default 1): Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-130, default 130): Using default value 130Command (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. [root@centos ~]# mkswap /dev/sdb1Setting up swapspace version 1, size = 1044188 KiBno label, UUID=85de9eea-a86d-48f4-a24d-00615a9812f8[root@centos ~]# swapon /dev/sdb1 [root@centos ~]# free -m total used free shared buffers cachedMem: 3816 517 3299 1 27 289-/+ buffers/cache: 200 3615Swap: 1019 0 1019[root@centos ~]# echo \"/dev/sdb1 swap swap defaults 0 0\" &gt;&gt; /etc/fstab #swap现已加入开机挂载全家桶！ 3、获取并列出当前系统上的所有磁盘设备；显示每个磁盘设备上每个分区相关的空间使用信息； 12345678910111213141516171819202122232425262728293031323334353637[root@centos gogogogogogogogoo]# cat DiskInfo_Jerry.sh #马哥说过，脚本就是命令的拼凑，所以，命令学好，脚本风骚。#!/bin/bash#Author: Jerrylsblkdf -ahT[root@centos gogogogogogogogoo]# bash DiskInfo_Jerry.sh NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 160G 0 disk ├─sda1 8:1 0 500M 0 part /boot└─sda2 8:2 0 159.5G 0 part ├─vg_centos-lv_root (dm-0) 253:0 0 158.5G 0 lvm / └─vg_centos-lv_swap (dm-1) 253:1 0 1G 0 lvm sdb 8:16 0 10G 0 disk └─sdb1 8:17 0 10G 0 part ├─vg_mage-mylv1-real (dm-3) 253:3 0 5G 0 lvm │ ├─vg_mage-mylv1 (dm-2) 253:2 0 5G 0 lvm │ └─vg_mage-snvg1 (dm-5) 253:5 0 5G 1 lvm └─vg_mage-snvg1-cow (dm-4) 253:4 0 160M 1 lvm └─vg_mage-snvg1 (dm-5) 253:5 0 5G 1 lvm sdc 8:32 0 60G 0 disk └─sdc1 8:33 0 60G 0 part Filesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg_centos-lv_root ext4 156G 3.4G 145G 3% /proc proc 0 0 0 - /procsysfs sysfs 0 0 0 - /sysdevpts devpts 0 0 0 - /dev/ptstmpfs tmpfs 1.9G 68K 1.9G 1% /dev/shm/dev/sda1 ext4 477M 35M 418M 8% /boot/dev/mapper/vg_mage-mylv1 ext4 4.8G 10M 4.6G 1% /usersnone binfmt_misc 0 0 0 - /proc/sys/fs/binfmt_miscvmware-vmblock fuse.vmware-vmblock 0 0 0 - /var/run/vmblock-fuse[root@centos gogogogogogogogoo]# 4、总结RAID的各个级别及其组合方式和性能的不同； 1234567891011121314151617181920212223242526RAID-0: 读、写性能提升； 可用空间：N*min(S1,S2,...) 无容错能力 最少磁盘数：2, 2+RAID-1： 读性能提升、写性能略有下降； 可用空间：1*min(S1,S2,...) 有冗余能力 最少磁盘数：2, 2+RAID-4： 1101, 0110, 1011RAID-5： 读、写性能提升 可用空间：(N-1)*min(S1,S2,...) 有容错能力：1块磁盘 最少磁盘数：3, 3+RAID-6： 读、写性能提升 可用空间：(N-2)*min(S1,S2,...) 有容错能力：2块磁盘 最少磁盘数：4, 4+ ​ 123456混合类型 RAID-10： 读、写性能提升 可用空间：N*min(S1,S2,...)/2 有容错能力：每组镜像最多只能坏一块； 最少磁盘数：4, 4+ 5、创建一个大小为10G的RAID1，要求有一个空闲盘，而且CHUNK大小为128k; 1生产环境都是用服务器自带的磁盘阵列卡来做raid，具体详见各厂商的操作文档，此题我就跳过了，请老湿原谅我的直接。 6、创建一个大小为4G的RAID5设备，chunk大小为256k，格式化ext4文件系统，要求可开机自动挂载至/backup目录，而且不更新访问时间戳，且支持acl功能； 12生产环境都是用服务器自带的磁盘阵列卡来做raid，具体详见各厂商的操作文档，此题我就跳过了，请老湿原谅我的直接。更新访问时间戳我要说一下，生产环境一般都是要更新访问时间戳的 7、接受一个以上文件路径作为参数；显示每个文件拥有的行数；总结说明本次共为几个文件统计了其行数； 1234567891011121314151617181920[root@centos gogogogogogogogoo]# bash Sum_wc-l.sh /etc/ssh/sshd_config /etc/fstab /etc/rc.local Number of rows in /etc/ssh/sshd_config is 138Number of rows in /etc/fstab is 16Number of rows in /etc/rc.local is 7total of 3 files[root@centos gogogogogogogogoo]# cat Sum_wc-l.sh #!/bin/bash#if [ $# -lt 1 ];then echo \"At least one filesname \" exit 2fi for i in $*;do line=$(cat $i | wc -l) echo \"Number of rows in $i is $line\" done echo \"total of $# files\"[root@centos gogogogogogogogoo]# 8、传递两个以上字符串当作用户名；创建这些用户；且密码同用户名；(总结说明共创建了几个用户； 123456789101112131415161718192021222324252627282930[root@centos gogogogogogogogoo]# bash Creat_user.sh At least two username [root@centos gogogogogogogogoo]# bash Creat_user.sh abb1 abb2 abb3 abb4Add user abb1 finishedAdd user abb2 finishedAdd user abb3 finishedAdd user abb4 finishedtotal of Create 4 users[root@centos gogogogogogogogoo]# cat Creat_user.sh #!/bin/bashif [ $# -lt 2 ];then echo \"At least two username \" exit 2fi for i in $*;do if grep \"^$i\\&gt;\" /etc/passwd &amp;&gt; /dev/null;then echo \"User $i exists\" else useradd $i echo $i | passwd --stdin $i &amp;&gt; /dev/null echo \"Add user $i finished\" fi done echo \"total of Create $# users\"[root@centos gogogogogogogogoo]# 9、新建20个用户，visitor1-visitor20；计算他们的ID之和； 12345678910111213141516171819[root@centos gogogogogogogogoo]# bash sum_userid.sh The users ID sum is: 10330[root@centos gogogogogogogogoo]# cat sum_userid.sh #!/bin/bashnum=0for i in &#123;1..20&#125;;do if id visitor$i &amp;&gt; /dev/null;then echo \"visitor$i exists\" else useradd visitor$i id=$(grep \"^visitor$i\\&gt;\" /etc/passwd | cut -d: -f 3) let num+=$id fidoneecho \"The users ID sum is: $num\"[root@centos gogogogogogogogoo]# 10、分别统计/etc/rc.d/rc.sysinit、/etc/rc.d/init.d/functions和/etc/fstab文件中以#号开头的行数之和，以及总的空白行数； 123456789101112131415161718192021222324252627282930313233343536[root@centos jerry_go]# cat title10-2.sh #!/bin/bash#Author:Jerry#Description## if [ -e $1 ]; then jinghao1=$(grep \"^#\" $1 | wc -l) blank_line1=$(grep \"^$\" $1 | wc -l) echo \"The file $1 Jinghao_lines:$jinghao1 Blank_lines:$blank_line1 \" else echo \"The file $1 no exist\" exit 2 fi if [ -e $2 ]; then jinghao2=$(grep \"^#\" $2 | wc -l) blank_line2=$(grep \"^$\" $2 | wc -l) echo \"The file $2 Jinghao_lines:$jinghao2 Blank_lines:$blank_line2 \" else echo \"The file $2 no exist\" exit 2 fi if [ -e $3 ]; then jinghao3=$(grep \"^#\" $3 | wc -l) blank_line3=$(grep \"^$\" $3 | wc -l) echo \"The file $3 Jinghao_lines:$jinghao3 Blank_lines:$blank_line3 \" else echo \"The file $3 no exist\" exit 2 fi echo \"Total jinghao lines: $[$jinghao1+$jinghao2+$jinghao3]\" echo \"Total blank lines: $[$blank_line1+$blank_line2+$blank_line3]\" &amp;&amp; exit 0 ​ ​ 1234567891011121314151617181920212223走一个！come on baby！[root@centos jerry_go]# bash title10-2.sh /etc/rc.d/rc.sysinit /etc/rc.d/init.d/functions /etc/fstab The file /etc/rc.d/rc.sysinit Jinghao_lines:44 Blank_lines:100 The file /etc/rc.d/init.d/functions Jinghao_lines:43 Blank_lines:105 The file /etc/fstab Jinghao_lines:8 Blank_lines:1 Total jinghao lines: 95Total blank lines: 206[root@centos jerry_go]# 异常的走一个！ 欧耶！[root@centos jerry_go]# bash title10-2.sh /etc/rc.d/rc.sysinit /etc/rc.d/init.d/funct234ions /etc/fstab The file /etc/rc.d/rc.sysinit Jinghao_lines:44 Blank_lines:100 The file /etc/rc.d/init.d/funct234ions no exist[root@centos jerry_go]#异常的再走一个！ [root@centos jerry_go]# bash title10-2.sh /etc/rc.d/rc.sysinit /etc/rc.d/init.d/functions /etc/fst123ab The file /etc/rc.d/rc.sysinit Jinghao_lines:44 Blank_lines:100 The file /etc/rc.d/init.d/functions Jinghao_lines:43 Blank_lines:105 The file /etc/fst123ab no exist[root@centos jerry_go]# 最后发现井号的英文是well number ， 脚本里面用拼音实在是很low，不过我是刚开始嘛，who care...... 11、显示当前系统上所有默认shell为bash的用户的用户名、UID以及此类所有用户的UID之和； 123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@centos jerry_go]# cat week7_title11.sh#!/bin/bash#Author:Jerry#Description##grep \"bin/bash$\" /etc/passwd |cut -d\":\" -f1,3for i in `grep \"bin/bash$\" /etc/passwd |awk -F \":\" '&#123;print $3&#125;'`;do let sum+=$idone echo \"Users ID sum is:$sum\"[root@centos jerry_go]# bash week7_title11.sh root:0magedu:500mamamamam:501magedu1:502abb1:503abb2:504abb3:505abb4:506visitor1:507visitor2:508visitor3:509visitor4:510visitor5:511visitor6:512visitor7:513visitor8:514visitor9:515visitor10:516visitor11:517visitor12:518visitor13:519visitor14:520visitor15:521visitor16:522visitor17:523visitor18:524visitor19:525visitor20:526Users ID sum is:13851 12、显示当前系统上所有，拥有附加组的用户的用户名；并说明共有多少个此类用户； 1234567891011121314151617[root@centos jerry_go]# bash week7_title12.sh bindaemonsysadmlpmailhaldaemonThis users has 7.[root@centos jerry_go]# cat week7_title12.sh #!/bin/bash#Author:Jerry#Description#grep -v \":$\" /etc/group |awk -F \":\" '&#123;print $1&#125;'echo \"This users has $(grep -v \":$\" /etc/group |awk -F \":\" '&#123;print $1&#125;'|wc -l).\" 13、创建一个由至少两个物理卷组成的大小为20G的卷组；要求，PE大小为8M；而在卷组中创建一个大小为5G的逻辑卷mylv1，格式化为ext4文件系统，开机自动挂载至/users目录，支持acl； 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859[root@centos ~]# pvdisplay #先看看环境 --- Physical volume --- PV Name /dev/sda2 VG Name vg_centos PV Size 159.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 40834 Free PE 0 Allocated PE 40834 PV UUID 1O2YO5-7puR-3Pfu-nR15-tqCc-JjPN-giIZeh \"/dev/sdb1\" is a new physical volume of \"10.00 GiB\" --- NEW Physical volume --- PV Name /dev/sdb1 VG Name PV Size 10.00 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID dmUkps-1j6e-q50O-yOh8-nBlT-lw6t-nGKnat \"/dev/sdc1\" is a new physical volume of \"60.00 GiB\" --- NEW Physical volume --- PV Name /dev/sdc1 VG Name PV Size 60.00 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID WfoY2H-efkl-qx0z-Yetm-wyV0-3lUU-u815Aq [root@centos ~]# vgcreate -s 8m vg_mage /dev/sdb1 /dev/sdc1 #创建一个由至少两个物理卷组成的大小为20G的卷组，我这里不止了，无伤大雅。 Volume group \"vg_mage\" successfully created[root@centos ~]# lvcreate -L 5G -n mylv1 vg_mage &amp;&amp; mkfs.ext4 /dev/vg_mage/mylv1 #在卷组中创建一个大小为5G的逻辑卷mylv1，格式化为ext4文件系统[root@centos ~]# mkdir /users &amp;&amp; echo \"/dev/vg_mage/mylv1 /users ext4 defaults,acl 0 0\" &gt;&gt; /etc/fstab #自动挂载至/users目录，支持acl[root@centos ~]# cat /etc/fstab ## /etc/fstab# Created by anaconda on Thu Jun 23 18:40:21 2016## Accessible filesystems, by reference, are maintained under '/dev/disk'# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/mapper/vg_centos-lv_root / ext4 defaults 1 1UUID=7b714956-acd7-44cb-af53-4eacde793fd9 /boot ext4 defaults 1 2#/dev/mapper/vg_centos-lv_swap swap swap defaults 0 0tmpfs /dev/shm tmpfs defaults 0 0devpts /dev/pts devpts gid=5,mode=620 0 0sysfs /sys sysfs defaults 0 0proc /proc proc defaults 0 0/dev/vg_mage/mylv1 /users ext4 defaults,acl 0 0 [root@centos ~]# 14、新建用户magedu；其家目录为/users/magedu，而后su切换至此用户，复制多个文件至家目录； 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@centos ~]# useradd magedu -d /users/magedu[root@centos ~]# su - magedu[magedu@centos ~]$ cp /etc/*.conf ~[magedu@centos ~]$ ls -al总用量 188drwx------ 4 magedu magedu 4096 12月 27 12:52 .drwxr-xr-x. 4 root root 4096 12月 27 12:48 ..-rw-r--r-- 1 magedu magedu 148 12月 27 12:52 asound.conf-rw-r--r-- 1 magedu magedu 18 5月 11 2016 .bash_logout-rw-r--r-- 1 magedu magedu 176 5月 11 2016 .bash_profile-rw-r--r-- 1 magedu magedu 124 5月 11 2016 .bashrc-rw-r--r-- 1 magedu magedu 1780 12月 27 12:52 cas.conf-rw-r--r-- 1 magedu magedu 21214 12月 27 12:52 dnsmasq.conf-rw-r--r-- 1 magedu magedu 519 12月 27 12:52 dracut.conf-rw-r--r-- 1 magedu magedu 20 12月 27 12:52 fprintd.conf-rw-r--r-- 1 magedu magedu 0 12月 27 12:52 gai.confdrwxr-xr-x 2 magedu magedu 4096 11月 12 2010 .gnome2-rw-r--r-- 1 magedu magedu 9 12月 27 12:52 host.conf-rw-r--r-- 1 magedu magedu 0 12月 27 12:52 init.conf-rw-r--r-- 1 magedu magedu 8120 12月 27 12:52 kdump.conf-rw-r--r-- 1 magedu magedu 449 12月 27 12:52 krb5.conf-rw-r--r-- 1 magedu magedu 1662 12月 27 12:52 latrace.conf-rw-r--r-- 1 magedu magedu 47 12月 27 12:52 ld.so.conf-rw-r--r-- 1 magedu magedu 2293 12月 27 12:52 libuser.conf-rw-r--r-- 1 magedu magedu 662 12月 27 12:52 logrotate.conf-rw-r--r-- 1 magedu magedu 10814 12月 27 12:52 ltrace.conf-rw-r--r-- 1 magedu magedu 827 12月 27 12:52 mke2fs.confdrwxr-xr-x 4 magedu magedu 4096 6月 23 2016 .mozilla-rw-r--r-- 1 magedu magedu 2620 12月 27 12:52 mtools.conf-rw-r--r-- 1 magedu magedu 1688 12月 27 12:52 nsswitch.conf-rw-r--r-- 1 magedu magedu 1698 12月 27 12:52 ntp.conf-rw-r--r-- 1 magedu magedu 370 12月 27 12:52 pm-utils-hd-apm-restore.conf-rw-r--r-- 1 magedu magedu 789 12月 27 12:52 prelink.conf-rw-r--r-- 1 magedu magedu 966 12月 27 12:52 readahead.conf-rw-r--r-- 1 magedu magedu 81 12月 27 12:52 resolv.conf-rw-r--r-- 1 magedu magedu 2875 12月 27 12:52 rsyslog.conf-rw-r--r-- 1 magedu magedu 216 12月 27 12:52 sestatus.conf-rw-r--r-- 1 magedu magedu 6717 12月 27 12:52 smartd.conf-rw-r--r-- 1 magedu magedu 256 12月 27 12:52 sos.conf-rw-r--r-- 1 magedu magedu 1800 12月 27 12:52 sysctl.conf-rw-r--r-- 1 magedu magedu 1309 12月 27 12:52 tpvmlp.conf-rw-r--r-- 1 magedu magedu 45 12月 27 12:52 Trolltech.conf-rw-r--r-- 1 magedu magedu 485 12月 27 12:52 updatedb.conf-rw-r--r-- 1 magedu magedu 3008 12月 27 12:52 warnquota.conf-rw-r--r-- 1 magedu magedu 969 12月 27 12:52 yum.conf[magedu@centos ~]$ ​ 15、扩展mylv1至9G，确保扩展完成后原有数据完全可用； 12lvextend -L +4G /dev/mapper/myvg-mylv1 resize2fs /dev/mapper/myvg-mylv1 16、缩减mylv1至7G，确保缩减完成后原有数据完全可用； 12345# umount /dev/vg_mage/mylv1# e2fsck -f /dev/vg_mage/mylv1# resize2fs /dev/vg_mage/mylv11 7G# lvreduce -L 7G /dev/vg_mage/mylv1# mount /dev/vg_mage/mylv1 /users/ 17、对mylv1创建快照，并通过备份数据；要求保留原有的属主属组等信息； 12[root@centos users]# lvcreate -s -l 20 -n snvg1 -p r /dev/vg_mage/mylv1Logical volume \"snvg1\" created.","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://zhusas.github.io/tags/shell/"}]},{"title":"Vim编辑器和脚本小试牛刀","slug":"Vim编辑器和脚本小试牛刀","date":"2018-08-02T08:44:00.000Z","updated":"2018-08-02T08:45:50.218Z","comments":true,"path":"2018/08/02/Vim编辑器和脚本小试牛刀/","link":"","permalink":"https://zhusas.github.io/2018/08/02/Vim编辑器和脚本小试牛刀/","excerpt":"VIM很强大，但是万变不离其宗，最核心的三模式以下图表示： 1、复制/etc/rc.d/rc.sysinit文件至/tmp目录，将/tmp/rc.sysinit文件中的以至少一个空白字符开头的行的行首加#；1:%s/^[[:blank:]]\\+.*/\\0#/g","text":"VIM很强大，但是万变不离其宗，最核心的三模式以下图表示： 1、复制/etc/rc.d/rc.sysinit文件至/tmp目录，将/tmp/rc.sysinit文件中的以至少一个空白字符开头的行的行首加#；1:%s/^[[:blank:]]\\+.*/\\0#/g 2、复制/boot/grub/grub.conf至/tmp目录中，删除/tmp/grub.conf文件中的行首的空白字符；1:%s/^[[:space:]]\\+//g 3、删除/tmp/rc.sysinit文件中的以#开头，且后面跟了至少一个空白字符的行行的#和空白字符1:%s/^#[[:blank:]]\\+//g 4、为/tmp/grub.conf文件中前三行的行首加#号；1:1,3s/^/\\0#/g 5、将/etc/yum.repos.d/CentOS-Media.repo文件中所有的enabled=0或gpgcheck=0的最后的0修改为1；1:%s/\\(enabled\\|gpgcheck\\)=0/\\1=1/g 6、每4小时执行一次对/etc目录的备份，备份至/backup目录中，保存的目录名为形如etc-2015040202021* */4 * * * /usr/bin/cp /etc /backup/etc-$(date +%Y%m%d%H%M)/ 7、每周2，4，6备份/var/log/messages文件至/backup/messages_logs/目录中，保存的文件名形如messages-201504021* * * * 2,4,6 /usr/bin/cp /var/log/messages /backupmessages_logs/messages-$(date +%Y%m%d) 8、每天每两小时取当前系统/proc/meminfo文件中的所有以S开头的信息至/stats/memory.txt文件中1* */2 * * * /usr/bin/grep -E \"S.*\" /proc/meminfo&gt;&gt;/stats/memory.txt 9、工作日的工作时间内，每两小时执行一次echo “howdy”1* 9-18/2 * * 1-5 /usr/bin/echo \"howdy\" 脚本编程部分创建目录/tmp/testdir-当前日期时间; 在此目录创建100个空文件：file1-file1001234567891011[root@centos7 ~]# cat testdir#!/bin/bash#Author:Jerrycd /tmp &amp;&amp; mkdir testdir-$(date +%Y%m%d%H%M%S)cd testdir-$(date +%Y%m%d%H%M%S)for i in &#123;1..100&#125;; do touch file$idone 123456789[root@centos7 ~]# bash testdir[root@centos7 ~]# ls /tmp/testdir-20161219144412/file1 file14 file2 file25 file30 file36 file41 file47 file52 file58 file63 file69 file74 file8 file85 file90 file96file10 file15 file20 file26 file31 file37 file42 file48 file53 file59 file64 file7 file75 file80 file86 file91 file97file100 file16 file21 file27 file32 file38 file43 file49 file54 file6 file65 file70 file76 file81 file87 file92 file98file11 file17 file22 file28 file33 file39 file44 file5 file55 file60 file66 file71 file77 file82 file88 file93 file99file12 file18 file23 file29 file34 file4 file45 file50 file56 file61 file67 file72 file78 file83 file89 file94file13 file19 file24 file3 file35 file40 file46 file51 file57 file62 file68 file73 file79 file84 file9 file95[root@centos7 ~]# 12、显示/etc/passwd文件中位于第偶数行的用户的用户名；1234567891011121314151617181920212223242526272829[root@centos7 ~]# sed -n '2~2p' /etc/passwd |cut -d \":\" -f1binadmsynchaltoperatorftpavahi-autoipdsystemd-networkpolkitdapacheabrtunboundsaslauthamandabackupgeocluesetroubleshootntpnfsnobodyqemumysqlpulsegnome-initial-setupsshdtcpdumphadooptestbashnologinuser1 13、创建10用户user10-user19；密码同用户名；1234567891011#!/bin/bash# for i in &#123;10..19&#125;;do if id user$i ;then echo \"user$i exists.\" else useradd user$i echo \"user$i\" | passwd --stdin user$i fi done 14、在/tmp/创建10个空文件file10-file19; 把file10的属主和属组改为user10，依次类推。12345678910111213#!/bin/bash# cd /tmp/ for i in &#123;10..19&#125;;do if [ -e file$i ] ;then echo \"file$i exists.\" chown user$i:user$i file$i else touch file$i chown user$i:user$i file$i fi done","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://zhusas.github.io/tags/shell/"}]},{"title":"skr! grep~ skr~~find!","slug":"skr-grep-skr-find","date":"2018-08-02T08:32:00.000Z","updated":"2018-08-02T08:33:30.996Z","comments":true,"path":"2018/08/02/skr-grep-skr-find/","link":"","permalink":"https://zhusas.github.io/2018/08/02/skr-grep-skr-find/","excerpt":"1、显示当前系统上root、fedora或user1用户的默认shell； 1grep -E \"^(root|hadoop|user1)\\&gt;\" /etc/passwd |cut -d\":\" -f1,7 2、找出/etc/rc.d/init.d/functions文件中某单词后面跟一组小括号的行，形如：hello()； 123456789101112131415161718192021222324[root@centos7 /]# grep -E -o \"[_[:alnum:]]+\\(\\)\" /etc/rc.d/init.d/functionscheckpid()__pids_var_run()__pids_pidof()daemon()killproc()pidfileofproc()pidofproc()status()echo_success()echo_failure()echo_passed()echo_warning()update_boot_stage()success()failure()passed()warning()action()strstr()is_ignored_file()is_true()is_false()apply_sysctl()","text":"1、显示当前系统上root、fedora或user1用户的默认shell； 1grep -E \"^(root|hadoop|user1)\\&gt;\" /etc/passwd |cut -d\":\" -f1,7 2、找出/etc/rc.d/init.d/functions文件中某单词后面跟一组小括号的行，形如：hello()； 123456789101112131415161718192021222324[root@centos7 /]# grep -E -o \"[_[:alnum:]]+\\(\\)\" /etc/rc.d/init.d/functionscheckpid()__pids_var_run()__pids_pidof()daemon()killproc()pidfileofproc()pidofproc()status()echo_success()echo_failure()echo_passed()echo_warning()update_boot_stage()success()failure()passed()warning()action()strstr()is_ignored_file()is_true()is_false()apply_sysctl() 3、使用echo命令输出一个绝对路径，使用grep取出其基名；扩展：取出其路径名 12345[root@centos7 /]# echo \"/etc/rc.d/init.d/functions\" |grep -E -o \"[^/]+$\"functions[root@centos7 /]# echo \"/etc/rc.d/init.d/functions\" |grep -E -o \"^/.*/\"/etc/rc.d/init.d/ 4、找出ifconfig命令结果中的1-255之间数字； 1ifconfig | grep -E -o \"\\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\\&gt;\" 5、挑战题：写一个模式，能匹配合理的IP地址； 1grep -E -o \"\\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\\&gt;.\\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\\&gt;.\\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\\&gt;.\\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\\&gt;\" 6、挑战题：写一个模式，能匹配出所有的邮件地址； 1grep -E -o “\\&lt;[a-z0-9A-Z._%+-]+@[a-z0-9A-Z.-]+\\.[a-zA-Z]&#123;2,6&#125;\\&gt;” 7、查找/var目录下属主为root，且属组为mail的所有文件或目录； 123[root@centos7 /]# find /var/ -user root -a -group mail/var/spool/mail/var/spool/mail/root 8、查找当前系统上没有属主或属组的文件；进一步：查找当前系统上没有属主或属组，且最近3天内曾被访问过的文件或目录； 1find / -nouser -o -nogroup -atime 3 9、查找/etc目录下所有用户都有写权限的文件； 1find /etc/ -perm -020 10、查找/etc目录下大于1M，且类型为普通文件的所有文件； 1find /etc/ -size +1M -type f 11、查找/etc/init.d/目录下，所有用户都有执行权限，且其它用户有写权限的文件； 1find /etc/init.d/ -perm -111 -perm -002 12、查找/usr目录下不属于root、bin或hadoop的文件； 123[root@centos7 /]# find /usr ! \\( -user root -o -user bin -o -user hadoop \\)/usr/share/polkit-1/rules.d/usr/libexec/abrt-action-install-debuginfo-to-abrt-cache 13、查找/etc/目录下至少有一类用户没有写权限的文件； 123456789101112131415161718192021222324252627282930313233[root@centos7 /]# find /usr ! \\( -user root -o -user bin -o -user hadoop \\)/usr/share/polkit-1/rules.d/usr/libexec/abrt-action-install-debuginfo-to-abrt-cache[root@centos7 /]# find /usr -not \\( -user root -o -user bin -o -user hadoop \\)/usr/share/polkit-1/rules.d/usr/libexec/abrt-action-install-debuginfo-to-abrt-cache[root@centos7 /]# find /usr ! \\( -user root -o -user bin -o -user hadoop \\)/usr/share/polkit-1/rules.d/usr/libexec/abrt-action-install-debuginfo-to-abrt-cache[root@centos7 /]# find /etc/ -not -perm /222/etc/pki/ca-trust/extracted/java/cacerts/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem/etc/pki/ca-trust/extracted/pem/email-ca-bundle.pem/etc/pki/ca-trust/extracted/pem/objsign-ca-bundle.pem/etc/gshadow/etc/openldap/certs/password/etc/shadow/etc/ld.so.conf.d/kernel-3.10.0-327.el7.x86_64.conf/etc/ld.so.conf.d/kernel-3.10.0-327.36.3.el7.x86_64.conf/etc/udev/hwdb.bin/etc/gshadow-/etc/dbus-1/system.d/cups.conf/etc/shadow-/etc/lvm/profile/cache-mq.profile/etc/lvm/profile/cache-smq.profile/etc/lvm/profile/command_profile_template.profile/etc/lvm/profile/metadata_profile_template.profile/etc/lvm/profile/thin-generic.profile/etc/lvm/profile/thin-performance.profile/etc/pam.d/cups/etc/machine-id/etc/sudoers 14、查找/etc目录下最近一周内其内容被修改过，且不属于root或hadoop的文件； 1find /etc -mtime -7 ! \\( -user root -o -user hadoop \\)","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zhusas.github.io/tags/linux/"}]},{"title":"Linux一些基本操作","slug":"Linux一些基本操作","date":"2018-08-02T07:47:08.000Z","updated":"2018-08-02T07:47:53.093Z","comments":true,"path":"2018/08/02/Linux一些基本操作/","link":"","permalink":"https://zhusas.github.io/2018/08/02/Linux一些基本操作/","excerpt":"一，列出当前系统上所有已经登录的用户的用户名，注意，同一个用户登录多次只显示一次即可12w -h | cut -d\" \" -f1 | uniqwho |cut -d\" \" -f1|uniq 二，取出最后登录到当前系统的用户相关信息1w| tail -n 1","text":"一，列出当前系统上所有已经登录的用户的用户名，注意，同一个用户登录多次只显示一次即可12w -h | cut -d\" \" -f1 | uniqwho |cut -d\" \" -f1|uniq 二，取出最后登录到当前系统的用户相关信息1w| tail -n 1 三，取出当前系统上被用户当作默认shell的最多的那个shell1cat /etc/passwd |cut -d \":\" -f7|grep /bin/bash|uniq 四，将/etc/passwd中的第三个字段数值最大的后10个用户的信息全部改为大写后保存至/tmp/maxusers.txt文件中1sort -t: -k3 -n /etc/passwd |tail -10|tr 'a-z' 'A-Z' &gt; /tmp/maxusers.txt 五，取出当前主机的IP地址，提示：对ifconfig命令的结果进行切分。12CentOS7 ifconfig |grep inet |cut -d' ' -f10|head -1 六，列出/etc/目录下所有以.conf结尾的文件的文件名，并将其名字转换为大写后保存至/tmp/etc.conf文件中1ll /etc/*.conf|cut -d'/' -f3|tr 'a-z' 'A-Z' &gt;/tmp/etc.conf 七，显示/var目录下一级子目录或文件的总个数1ls -al /var/|head -1|cut -d' ' -f2 八，取出/etc/group文件中第三个字段数值最小的10个组的名字1sort -t: -k3 -n /etc/group|head -10|cut -d':' -f1 九，将/etc/fstab和/etc/issue文件的内容合并为同一个内容保存至/tmp/etc.test文件中1cat /etc/fstab /etc/issue &gt; /tmp/etc.test 十，请总结描述用户和组管理类命令的使用方法并完成练习(1)、创建组distro，其GID为2016; 1groupadd distro -g 2016 (2)、创建用户mandriva, 其ID号为1005；基本组为distro; 1adduser mandriva -u 1005 -g distro (3)、创建用户mageia，其ID号为1100，家目录为/home/linux; 1useradd mageia -u 1100 -d /home/linux (4)、给用户mageia添加密码，密码为mageedu; 1234567[root@centos7 home]# passwd mageia 更改用户 mageia 的密码 。新的 密码：无效的密码： 密码少于 8 个字符重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。[root@centos7 home]# (5)、删除mandriva，但保留其家目录; 1userdel mandriva (6)、创建用户slackware，其ID号为2002，基本组为distro，附加组peguin; 1groupadd peguin &amp;&amp; useradd slackware -u 2002 -g distro -G peguin (7)、修改slackware的默认shell为/bin/tcsh; 1usermod -s /usr/bin/tcsh slackware (8)、为用户slackware新增附加组admins; 1groupadd admins &amp;&amp; usermod -G admins slackware (9)、为slackware添加密码，且要求密码最短使用期限为3天，最长为180天，警告为3天; 12echo \"123456\" | passwd --stdin slackwarepasswd -n 3 -x 180 -w 3 slackware (10)、添加用户openstack，其ID号为3003, 基本组为clouds，附加组为peguin和nova; 1groupadd nova &amp;&amp; groupadd clouds &amp;&amp; useradd openstack -u 3003 -g clouds -G peguin,nova (11)、添加系统用户mysql，要求其shell为/sbin/nologin; 1useradd -s /sbin/nologin mysql (12)、使用echo命令，非交互式为openstack添加密码. 1echo \"123456\" | passwd –stdin openstack","categories":[],"tags":[]},{"title":"Linux上的文件管理类命令其常用的使用方法及其相关示例演示","slug":"Linux上的文件管理类命令其常用的使用方法及其相关示例演示","date":"2018-08-02T07:41:00.000Z","updated":"2018-08-02T07:43:17.404Z","comments":true,"path":"2018/08/02/Linux上的文件管理类命令其常用的使用方法及其相关示例演示/","link":"","permalink":"https://zhusas.github.io/2018/08/02/Linux上的文件管理类命令其常用的使用方法及其相关示例演示/","excerpt":"目录管理类的命令mkdir用法： 1mkdir [选项]... 目录... 选项： 1-p 递归创建多个目录 实例： 1234567891011121314[root@centos7 ~]# mkdir -p /tmp/jerry/2016/11/4[root@centos7 /]# tree /tmp /tmp├── akonadi-root.9I0Ba3├── anaconda.log├── hogsuspend├── hsperfdata_root│ └── 88148├── hsperfdata_user├── ifcfg.log├── jerry│ └── 2016│ └── 11│ └──4 12**注意：****centos7&amp;6默认没有安装tree命令，记得yum install tree 就OK。**","text":"目录管理类的命令mkdir用法： 1mkdir [选项]... 目录... 选项： 1-p 递归创建多个目录 实例： 1234567891011121314[root@centos7 ~]# mkdir -p /tmp/jerry/2016/11/4[root@centos7 /]# tree /tmp /tmp├── akonadi-root.9I0Ba3├── anaconda.log├── hogsuspend├── hsperfdata_root│ └── 88148├── hsperfdata_user├── ifcfg.log├── jerry│ └── 2016│ └── 11│ └──4 12**注意：****centos7&amp;6默认没有安装tree命令，记得yum install tree 就OK。** 选项： 1-v 显示创建过程即命令执行过程 实例： 123456[root@centos7 /]# mkdir -pv /tmp/aaa/bbb/ccc/2016/11qamkdir: 已创建目录 \"/tmp/aaa\"mkdir: 已创建目录 \"/tmp/aaa/bbb\"mkdir: 已创建目录 \"/tmp/aaa/bbb/ccc\"mkdir: 已创建目录 \"/tmp/aaa/bbb/ccc/2016\"mkdir: 已创建目录 \"/tmp/aaa/bbb/ccc/2016/11qa\" 选项： 1-m：设定目录权限，不加则为默认权限 实例： 12345678910111213141516[root@centos7 /]# mkdir -m 777 -pv /tmp/fbi/ciamkdir: 已创建目录 \"/tmp/fbi\"mkdir: 已创建目录 \"/tmp/fbi/cia\" [root@centos7 /]# ll /tmp/fbi总用量 0drwxrwxrwx. 2 root root 6 11月 4 15:52 cia[root@centos7 /]# mkdir -m 775 -pv /tmp/hbo/oom/ubuntumkdir: 已创建目录 \"/tmp/hbo\"mkdir: 已创建目录 \"/tmp/hbo/oom\"mkdir: 已创建目录 \"/tmp/hbo/oom/ubuntu[root@centos7 /]# ll /tmp/hbo/oom/总用量 0drwxrwxr-x. 2 root root 6 11月 4 16:00 ubuntu注意：-m 参数设定的目录权限只对最后一级的目录生效，其上级目录均是默认的755。哈哈~~ rmdir用法： 1rmdir [选项]... 目录... 选项参数： 1234567 --ignore-fail-on-non-empty 忽略仅由目录非空产生的所有错误-p, --parents remove DIRECTORY and its ancestors; e.g., 'rmdir -p a/b/c' is similar to 'rmdir a/b/c a/b a'-v, --verbose output a diagnostic for every directory processed --help 显示此帮助信息并退出 --version 显示版本信息并退出 实例： 123[root@centos7 tmp]# rmdir -pv fbi/cia/rmdir: 正在删除目录 \"fbi/cia/\"rmdir: 正在删除目录 \"fbi\" 文件查看类命令cat用法： 12用法：cat [选项]... [文件]...将[文件]或标准输入组合输出到标准输出。 选项： 123456789101112-A, --show-all 等于-vET-b, --number-nonblank 对非空输出行编号-e 等于-vE-E, --show-ends 在每行结束处显示\"$\"-n, --number 对输出的所有行编号-s, --squeeze-blank 不输出多行空行-t 与-vT 等价-T, --show-tabs 将跳格字符显示为^I-u (被忽略)-v, --show-nonprinting 使用^ 和M- 引用，除了LFD和 TAB 之外 --help 显示此帮助信息并退出 --version 显示版本信息并退出 平时可能用到的选项就是输出行号了，实例如下： 123456789101112131415[root@centos7 /]# cat -n /etc/rc.local 1 #!/bin/bash 2 # THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES 3 # 4 # It is highly advisable to create own systemd services or udev rules 5 # to run scripts during boot instead of using this file. 6 # 7 # In contrast to previous versions due to parallel execution during boot 8 # this script will NOT be run after all other services. 9 #10 # Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure11 # that this script will be executed during boot.12 13 touch /var/lock/subsys/local[root@centos7 /]# tactac命令：与cat功能相近，只是逆序显示文件内容 head用法： 12head [选项]... [文件]...查看文件的前N行，默认为10行 选项： 12-n -# 实例： 1234567891011121314151617181920212223242526272829[root@centos7 ~]# head /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologin[root@centos7 ~]# head - 15 /etc/passwd[root@centos7 ~]# head -15 /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinavahi-autoipd:x:170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin tail用法： 1tail [选项]... [文件]... 选项参数： 123-n：指定显示的行数。不加任何参数默认显示10行，从最后一行开始；-#：直接指定显示的行数，从最后一行开始；-f：查看文件尾部内容结束后不退出，跟随显示新增的行； 实例： 123456789101112131415[root@centos7 ~]# tail -2 /etc/passwdtcpdump:x:72:72::/:/sbin/nologinuser:x:1000:1000:user:/home/user:/bin/bash[root@centos7 ~]# tail /etc/passwdmysql:x:27:27:MariaDB Server:/var/lib/mysql:/sbin/nologinpcp:x:988:985:Performance Co-Pilot:/var/lib/pcp:/sbin/nologinpulse:x:171:171:PulseAudio System Daemon:/var/run/pulse:/sbin/nologingdm:x:42:42::/var/lib/gdm:/sbin/nologingnome-initial-setup:x:987:982::/run/gnome-initial-setup/:/sbin/nologinavahi:x:70:70:Avahi mDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinoprofile:x:16:16:Special user account to be used by OProfile:/var/lib/oprofile:/sbin/nologintcpdump:x:72:72::/:/sbin/nologinuser:x:1000:1000:user:/home/user:/bin/bash more用法： 12more [选项] 文件...特点：翻屏至文件尾部后自动退出； 选项参数： 1234567891011-d 显示帮助，而不是响铃-f 统计逻辑行数而不是屏幕行数-l 抑制换页(form feed)后的暂停-p 不滚屏，清屏并显示文本-c 不滚屏，显示文本并清理行尾-u 抑制下划线-s 将多个空行压缩为一行-NUM 指定每屏显示的行数为 NUM+NUM 从文件第 NUM 行开始显示+/STRING 从匹配搜索字符串 STRING 的文件位置开始显示-V 输出版本信息并退出 实例： 1略过，给你个眼神自己体会^_^ less 特点： 其实man读取帮助手册就是调用的less指令。所以less命令的操作方式同man 文件管理类命令cp用法： 1234567891011121314151617单源复制：cp [OPTION]... [-T] SOURCE DEST多源复制：cp [OPTION]... SOURCE... DIRECTORY cp [OPTION]... -t DIRECTORY SOURCE...单源复制：cp [OPTION]... [-T] SOURCE DEST 如果DEST不存在：则事先创建此文件，并复制源文件的数据流至DEST中； 如果DEST存在： 如果DEST是非目录文件：则覆盖目标文件； 如果DEST是目录文件：则先在DEST目录下创建一个与源文件同名的文件，并复制其数据流；多源复制：cp [OPTION]... SOURCE... DIRECTORY cp [OPTION]... -t DIRECTORY SOURCE... 如果DEST不存在：错误； 如果DEST存在： 如果DEST是非目录文件：错误； 如果DEST是目录文件：分别复制每个文件至目标目录中，并保持原名； 选项参数： 12345678910111213-i：交互式复制，即覆盖之前提醒用户确认；-f：强制覆盖目标文件；-r, -R：递归复制目录；-d：复制符号链接文件本身，而非其指向的源文件；-a：-dR --preserve=all, archive，用于实现归档；--preserv= mode：权限 ownership：属主和属组 timestamps: 时间戳 context：安全标签 xattr：扩展属性 links：符号链接 all：上述所有属性 实例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354`单源复制-目标文件不存在情况`[root@centos ~]# ls /tmp/whatis.q3Uigb yum.log[root@centos ~]# cp /etc/issue /tmp[root@centos ~]# ls /tmp/issue whatis.q3Uigb yum.log[root@centos ~]# cat /tmp/issue CentOS release 6.5 (Final)Kernel \\r on an \\m`单源复制-目标文件已存在情况`[root@centos ~]# cp /etc/hosts /tmp/issue cp: overwrite `/tmp/issue'? y[root@centos ~]# cat /tmp/issue 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6`多源复制-目标目录不存在情况`[root@centos ~]# cp /etc/hosts /etc/issue /tmp/xcp: target `/tmp/x' is not a directory`多源复制-目标目录已存在情况`[root@centos ~]# mkdir /tmp/x[root@centos ~]# cp /etc/hosts /etc/issue /tmp/x[root@centos ~]# ls /tmp/xhosts issue[root@centos ~]# `-r选项实例`[root@centos ~]# mkdir -p /tmp/souce/x/y/z[root@centos ~]# mkdir /tmp/dest[root@centos ~]# cp -r /tmp/souce/ /tmp/dest/[root@centos ~]# tree /tmp/dest/ /tmp/dest/└── souce └── x └── y └── z4 directories, 0 files[root@centos ~]# `--preserve选项实例`[root@centos ~]# ls -l /tmp/ |grep liubin-rw-rw-r--. 1 liubin liubin 0 Sep 27 04:56 liubin [root@centos ~]# cp --preserve=ownership /tmp/liubin /tmp/root[root@centos ~]# ls -l /tmp/total 16drwxr-xr-x. 3 root root 4096 Sep 27 04:53 dest-rw-r--r--. 1 root root 158 Sep 27 04:43 issue -rw-rw-r--. 1 liubin liubin 0 Sep 27 04:56 liubin -rw-rw-r--. 1 liubin liubin 0 Sep 27 04:59 root drwxr-xr-x. 3 root root 4096 Sep 27 04:49 soucedrwxr-xr-x. 2 root root 4096 Sep 27 04:44 x-rw-------. 1 root root 0 Sep 27 03:07 yum.log mv用法： 123mv [OPTION]... [-T] SOURCE DESTmv [OPTION]... SOURCE... DIRECTORYmv [OPTION]... -t DIRECTORY SOURCE.. 选项参数： 12-i：交互式 -f：强制移动 实例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@localhost ~]# tree testtest|-- 1p2a|-- 28pa|-- Pa99|-- cpdoc.txt|-- hahaha| |-- cpdoc.txt| |-- cpdoc1.txt| `-- text.txt|-- p,a|-- pa|-- pa12`-- papi1 directory, 11 files[root@localhost ~]# mv test/1p2a test/hahaha[root@localhost ~]# tree testtest|-- 28pa|-- Pa99|-- cpdoc.txt|-- hahaha| |-- 1p2a| |-- cpdoc.txt| |-- cpdoc1.txt| `-- text.txt|-- p,a|-- pa|-- pa12`-- papi1 directory, 11 files[root@localhost ~]# mv test/hahaha test/mvtest[root@localhost ~]# tree testtest|-- 28pa|-- Pa99|-- cpdoc.txt|-- mvtest| |-- 1p2a| |-- cpdoc.txt| |-- cpdoc1.txt| `-- text.txt|-- p,a|-- pa|-- pa12`-- papi1 directory, 11 files rm用法： 1rm [OPTION]... FILE... 选项参数： 123-i：interactive-f：force-r: recursive 实例： 123456789101112[root@centos ~]# ls /tmpdest issue liubin root souce yum.log[root@centos ~]# tree /tmp/souce//tmp/souce/└── x └── y └── z 3 directories, 0 files[root@centos ~]# rm -rf /tmp/souce/[root@centos ~]# lsanaconda-ks.cfg install.log install.log.syslog[root@centos ~]# bash的工作特性之命令执行状态返回值和命令行展开所涉及的内容及其示例演示。用法echo $?：显示最近一条命令的执行结果 只能查看最近一条命令的执行的状态结果返回值 命令执行成功，则显示：0 命令执行失败，则显示：1-255之间的任意数字 实例1234567891011121314[root@centos7 ~]# ls /varaccount cache db games kerberos local log nis preserve spool tmp ypadm crash empty gopher lib lock mail opt run target www[root@centos7 ~]# echo $?0[root@centos7 ~]# ls /vartels: 无法访问/varte: 没有那个文件或目录[root@centos7 ~]# echo $?2[root@centos7 ~]# lsd /varbash: lsd: 未找到命令...[root@centos7 ~]# echo $?127[root@centos7 ~]# 创建/tmp目录下的：a_c, a_d, b_c, b_d1234567891011[root@centos7 ~]# mkdir -v /tmp/&#123;a,b&#125;_&#123;c,d&#125;mkdir: 已创建目录 \"/tmp/a_c\"mkdir: 已创建目录 \"/tmp/a_d\"mkdir: 已创建目录 \"/tmp/b_c\"mkdir: 已创建目录 \"/tmp/b_d\"[root@centos7 ~]# ls /tmp/a_ca_danaconda.logb_c b_d 创建/tmp/mylinux目录下的：12345678910111213141516171819202122232425mylinux├── bin├── boot│ └── grub├── dev├── etc│ ├── rc.d│ │ └── init.d│ └── sysconfig│ └── network-scripts├── lib│ └── modules├── lib64├── proc├── sbin├── sys├── tmp├── usr│ └── local│ ├── bin│ └── sbin└── var ├── lock ├── log └── run 123456789101112131415161718192021222324252627[root@centos7 ~]# mkdir -pv /tmp/mylinux/&#123;bin,boot/grub,dev,etc/&#123;rc.d/init.d,sysconfig/network-scripts&#125;,lib/modules,lib64,proc,sbin,sys,tmp,usr/local/&#123;bin,sbin&#125;,var/&#123;lock,log,run&#125;&#125;mkdir: 已创建目录 \"/tmp/mylinux\"mkdir: 已创建目录 \"/tmp/mylinux/bin\"mkdir: 已创建目录 \"/tmp/mylinux/boot\"mkdir: 已创建目录 \"/tmp/mylinux/boot/grub\"mkdir: 已创建目录 \"/tmp/mylinux/dev\"mkdir: 已创建目录 \"/tmp/mylinux/etc\" mkdir: 已创建目录 \"/tmp/mylinux/etc/rc.d\"mkdir: 已创建目录 \"/tmp/mylinux/etc/rc.d/init.d\"mkdir: 已创建目录 \"/tmp/mylinux/etc/sysconfig\"mkdir: 已创建目录 \"/tmp/mylinux/etc/sysconfig/network-scripts\"mkdir: 已创建目录 \"/tmp/mylinux/lib\"mkdir: 已创建目录 \"/tmp/mylinux/lib/modules\"mkdir: 已创建目录 \"/tmp/mylinux/lib64\"mkdir: 已创建目录 \"/tmp/mylinux/proc\"mkdir: 已创建目录 \"/tmp/mylinux/sbin\"mkdir: 已创建目录 \"/tmp/mylinux/sys\"mkdir: 已创建目录 \"/tmp/mylinux/tmp\"mkdir: 已创建目录 \"/tmp/mylinux/usr\"mkdir: 已创建目录 \"/tmp/mylinux/usr/local\"mkdir: 已创建目录 \"/tmp/mylinux/usr/local/bin\"mkdir: 已创建目录 \"/tmp/mylinux/usr/local/sbin\"mkdir: 已创建目录 \"/tmp/mylinux/var\"mkdir: 已创建目录 \"/tmp/mylinux/var/lock\"mkdir: 已创建目录 \"/tmp/mylinux/var/log\"mkdir: 已创建目录 \"/tmp/mylinux/var/run\"[root@centos7 ~]# 文件的元数据信息有哪些，分别表示什么含义，如何查看？如何修改文件的时间戳信息。1234567891011121314151617181920[root@centos7 etc]# stat /bin/bash文件：\"/bin/bash\"大小：960392 块：1880 IO 块：4096 普通文件设备：fd00h/64768d Inode：67111627 硬链接：1权限：(0755/-rwxr-xr-x) Uid：( 0/ root) Gid：( 0/ root)环境：system_u:object_r:shell_exec_t:s0 最近访问：2016-11-06 13:06:17.318000042 +0800最近更改：2016-08-03 00:00:07.000000000 +0800最近改动：2016-11-03 13:47:45.414998262 +0800创建时间：-touch命令：touch - change file timestampstouch [OPTION]... FILE... -c: 指定的文件路径不存在时不予创建； -a: 仅修改access time； -m：仅修改modify time； -t STAMP [[CC]YY]MMDDhhmm[.ss] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354实例一：创建不存在的文件命令：touch log2012.log log2013.log输出：［root@localhost test］# touch log2012.log log2013.log［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 16:01 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log如果log2014.log不存在，则不创建文件［root@localhost test］# touch -c log2014.log［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 16:01 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log实例二：更新log.log的时间和log2012.log时间戳相同命令：touch -r log.log log2012.log 输出：［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 16:01 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log -rw-r--r-- 1 root root 0 10-28 14:48 log.log［root@localhost test］# touch -r log.log log2012.log［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 14:48 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log -rw-r--r-- 1 root root 0 10-28 14:48 log.log实例三：设定文件的时间戳 命令：touch -t 201211142234.50 log.log输出：［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 14:48 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log -rw-r--r-- 1 root root 0 10-28 14:48 log.log［root@localhost test］# touch -t 201211142234.50 log.log［root@localhost test］# ll -rw-r--r-- 1 root root 0 10-28 14:48 log2012.log -rw-r--r-- 1 root root 0 10-28 16:01 log2013.log -rw-r--r-- 1 root root 0 2012-11-14 log.log说明： -t time 使用指定的时间值 time 作为指定文件相应时间戳记的新值．此处的 time规定为如下形式的十进制数：［［CC］YY］MMDDhhmm［.SS］ 这里，CC为年数中的前两位，即”世纪数”；YY为年数的后两位，即某世纪中的年数．如果不给出CC的值，则touch 将把年数CCYY限定1969--2068之内．MM为月数，DD为天将把年数CCYY限定在1969--2068之内．MM为月数，DD为天数，hh 为小时数（几点），mm为分钟数，SS为秒数．此处秒的设定范围是0--61，这样可以处理闰秒．这些数字组成的时间是环境变量TZ指定的时区中的一个时 间．由于系统的限制，早于1970年1月1日的时间是错误的 如何定义一个命令的别名，如何在命令中引用另一个命令的执行结果？1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253命令别名查看：[root@centos ~]# aliasalias cp='cp -i'alias l.='ls -d .* --color=auto'alias ll='ls -l --color=auto'alias ls='ls --color=auto'alias mv='mv -i'alias rm='rm -i'创建别名：[root@centos ~]# alias clear='cls'[root@centos ~]# aliasalias clear='cls'alias cp='cp -i'alias l.='ls -d .* --color=auto'alias ll='ls -l --color=auto'alias ls='ls --color=auto'alias mv='mv -i'alias rm='rm -i'引用命令的执行结果： 使用“引用：[root@centos ~]# echo `date`Tue Sep 27 06:45:08 CST 2016[root@centos ~]#使用$(COMMAND)引用[root@centos ~]# file $(which --skip-alias ls)/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped[root@centos ~]# 显示var目录下所有以l开头，以一个小写字母结尾，且中间至少出现一位数字（可以有其它字符）的文件或目录。12345678[root@centos7 /]# ls -dl /var/l*[0-9]*[a-z]drwxr-xr-x. 2 root root 6 11月 6 14:58 /var/l42opmdrwxr-xr-x. 2 root root 6 11月 6 14:58 /var/l47wsd-rw-r--r--. 1 root root 0 11月 6 15:38 /var/l9cxzdrwxr-xr-x. 2 root root 6 11月 6 15:35 /var/ls4gsdrwxr-xr-x. 2 root root 6 11月 6 15:34 /var/lw56tcp-rw-r--r--. 1 root root 0 11月 6 15:37 /var/lw89cxz-rw-r--r--. 1 root root 0 11月 6 15:37 /var/lw99cxz ​ 12345678[root@centos7 /]# ls -dl /var/l*[[:digit:]]*[[:alpha:]]drwxr-xr-x. 2 root root 6 11月 6 14:58 /var/l42opmdrwxr-xr-x. 2 root root 6 11月 6 14:58 /var/l47wsd-rw-r--r--. 1 root root 0 11月 6 15:38 /var/l9cxzdrwxr-xr-x. 2 root root 6 11月 6 15:35 /var/ls4gsdrwxr-xr-x. 2 root root 6 11月 6 15:34 /var/lw56tcp-rw-r--r--. 1 root root 0 11月 6 15:37 /var/lw89cxz-rw-r--r--. 1 root root 0 11月 6 15:37 /var/lw99cxz 显示/etc目录下，以任意一个数字开头，且以非数字结尾的文件或目录。12345[root@centos7 /]# ls -dl /etc/[[:digit:]]*[[:alpha:]]drwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/12sad-rw-r--r--. 1 root root 29 11月 6 15:45 /etc/12sddrwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/23gfhg-rw-r--r--. 1 root root 35 11月 6 15:46 /etc/4543sdcsf ​ 12345[root@centos7 /]# ls -dl /etc/[0-9]*[^0-9]drwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/12sad-rw-r--r--. 1 root root 29 11月 6 15:45 /etc/12sddrwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/23gfhg-rw-r--r--. 1 root root 35 11月 6 15:46 /etc/4543sdcsf 显示/etc目录下，以非字母开头，后面跟了一个字母以及其它任意长度任意字符的文件或目录。12345[root@centos7 /]# ls -dl /etc/[^a-z]*[a-z]drwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/12sad-rw-r--r--. 1 root root 29 11月 6 15:45 /etc/12sddrwxr-xr-x. 2 root root 6 11月 6 15:43 /etc/23gfhg-rw-r--r--. 1 root root 35 11月 6 15:46 /etc/4543sdcsf 在/tmp目录下创建以tfile开头，后跟当前日期和时间的文件，文件名形如：tfile-2016-05-27-09-32-22。1touch /tmp/tfile-$(date +%F-%H-%M-%S) 复制/etc目录下所有以p开头，以非数字结尾的文件或目录到/tmp/mytest1目录中。1mkdir /tmp/mytest1 &amp;&amp; cp -r /etc/p*[^0-9] /tmp/mytest1/ 复制/etc目录下所有以.d结尾的文件或目录至/tmp/mytest2目录中。1mkdir /tmp/mytest2 &amp;&amp; cp -r /etc/*.d /tmp/mytest2/ 复制/etc/目录下所有以l或m或n开头，以.conf结尾的文件至/tmp/mytest3目录中。1mkdir -p /tmp/mytest3 &amp;&amp; cp /etc/[lmn]*.conf /tmp/mytest3/","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhusas.github.io/tags/Linux/"}]},{"title":"Linux的基础知识","slug":"Linux的基础知识","date":"2018-08-02T06:22:00.000Z","updated":"2018-08-02T07:05:52.405Z","comments":true,"path":"2018/08/02/Linux的基础知识/","link":"","permalink":"https://zhusas.github.io/2018/08/02/Linux的基础知识/","excerpt":"硬件冯·洛伊曼体系 控制器(Control)：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。 运算器(Datapath)：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。 存储器(Memory)：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。 输入(Input system)：输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。 输出(Output system)：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。","text":"硬件冯·洛伊曼体系 控制器(Control)：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。 运算器(Datapath)：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。 存储器(Memory)：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。 输入(Input system)：输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。 输出(Output system)：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。 软件低级语言：汇编语言，汇编器；写驱动 高级语言：系统级：C，C++，对性能要求较高的服务类程序应用级：Java,Python,Ruby Linux 发行版RedHat Enterprise LinuxRedhat系列，包括RHEL(Redhat Enterprise Linux，也就是所谓的Redhat Advance Server，收费版本)、Fedora Core(由原来的Redhat桌面版本发展而来，免费版本)、CentOS(RHEL的社区 克隆版本，免费)。Redhat是在国内使用人群最多的Linux版本，甚至有人将Redhat等同于Linux。所以这个版本的特点就是使用人群数量大，资料非常多，言下之意就是如果你有什么不明白的地方，很容易找到人来问，而且网上的一般Linux教程都是以Redhat为例来讲解的。Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用，但是Fedora Core的稳定性较差，最好只用于桌面应用。 CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。每个版本的 CentOS都会获得十年的支持（通过安全更新方式）。新版本的 CentOS 大约每两年发行一次，而每个版本的 CentOS 会定期（大概每六个月）更新一次，以便支持新的硬件。这样，建立一个安全、低维护、稳定、高预测性、高重复性的 Linux 环境。CentOS是Community Enterprise Operating System的缩写。CentOS 是RHEL（Red Hat Enterprise Linux）源代码再编译的产物，而且在RHEL的基础上修正了不少已知的 Bug ，相对于其他 Linux 发行版，其稳定性值得信赖。 Debian：只有社区的发行版Debian系列，包括Debian和Ubuntu等。Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。Debian最早由Ian Murdock于1993年创建，分为三个版本分支（branch）： stable, testing 和unstable。其中，unstable为最新的测试版本，其中包括最新的软件包，但是也有相对较多的bug，适合桌面用户。testing的版本都经过unstable中的测试，相对较为稳定，也支持了不少新技术（比如SMP等）。而stable一般只用于服务器，上面的软件包大部分都比较过时，但是稳定和安全性都非常的高。Debian最具特色的是apt-get / dpkg包管理方式，其实Redhat的YUM也是在模仿Debian的APT方式，但在二进制文件发行方式中，APT应该是最好的了。Debian的资料也很丰富，有很多支持的社区，有问题求教也有地方可去。Debian是包括Ubuntu在内许多发行版的上游，而Ubuntu又是Linux Mint及其他发行版的上游。Debian在服务器和桌面电脑领域都有着广泛的应用。Debian是一个纯开源计划并着重在一个关键点上，稳定性。它同时也提供了最大的和完整的软件仓库给用户。 Ubuntu是基于Debian的unstable版本加强而来，可以这么说，Ubuntu就是一个拥有Debian所有的优点，以及自己所加强的优点的近乎完美的 Linux桌面系统。根据选择的桌面系统不同，有三个版本可供选择，基于Gnome的Ubuntu，基于KDE的Kubuntu以及基于Xfc的Xubuntu。特点是界面非常友好，容易上手，对硬件的支持非常全面，是最适合做桌面系统的Linux发行版本。 Slackware LinuxSlackware Linux是由Patrick Volkerding开发的GNU/Linux发行版。与很多其他的发行版不同，它坚持KISS(Keep It Simple Stupid)的原则。一开始，配置系统会有一些困难，但是更有经验的用户会喜欢这种方式的透明性和灵活性。 Slackware 很多特性体现出了KISS原则，最为有名的一些例子就是不依赖图形界面的文本化系统配置、传统的服务管理方式和不解决依赖的包管理方式。它的最大特点就是安装灵活，目录结构严谨，版本力求稳定而非追新。Slackware的软件包都是通常的tgz(tar/gzip) 或者txz(xz) 格式文件再加上安装脚本。Tgz/Txz 对于有经验的用户来说，比RPM更为灵活，并避免了APT 之类管理器可能带来的的依赖地狱。 作为开源软件，Slackware与商业版本的关系并不大，但与几家提供付费支持的厂商一直保持的合作关系。作为最早的可用版本之一，Slackware Linux是由Patrick Volkerding开发的GNU/Linux发行版。与很多其他的发行版不同，它坚持KISS(Keep It Simple Stupid)的原则，就是说尽量不依赖配置系统的图形界面工具。其安装程序也是一些Dialog界面的shell脚本写成，你可以在安装的任何时候跳到任何安装步骤，而且这些脚本在安装之后也可以很方便的使用 Slackware与其他的发行版本（Red Hat、Debian、Gentoo、SuSE、 Mandriva、Ubuntu等）不同的道路，它力图成为“UNIX风格”的Linux发行版本。只吸收稳定版本的应用程序，并且缺少其他linux版本中那些为发行版本定制的配置工具。在当今systemd大势所趋的情况下，Slackware仍然坚持BSD启动风格。 Slackware主要为x86 PC开发，从2005年起开始出现针对System/390架构的官方移植。同时ARM、DEC Alpha、SPARC和PowerPC也存在一些非官方的移植。Slackware官方维护着一个开发版本（Slackware Current），不断有新的软件被加入到这个源，用户可以实现类似Archlinux的滚动升级，等到一个开发版本足够稳定，便会发布一个稳定版。Slackware是支持x86、amd64（即x86_64）、ARM、Alpha、SPARC、PowerPC的一套GNU/Linux操作系统，其正式发布由PatrickVolkerding 负责。 Linux发行版汇总 Linux各发行版的联系与区别：联系： 各发行版本均采用Linux的内核（kernel）； 各发行版本均遵守GPL版权协定； 各发行版本均遵循 Linux Standard Base (LSB)等标准来开发； 各发行版本均遵循FHS（File system Hierarchy Standard）标准规范； 区别： 不同的发行版采用的软件包管理方式不同；最有名的是 debain 的 deb 包，redhat 的 rpm 包，slackware 等的 tgz 包。 发行初衷不同，导致特点也不同，见下图： 三、Linux的哲学思想 一切皆文件 由众多的单一的程序完成一件比较复杂的工作，一个程序只做一件事，并且做好他。 尽量避免与用户交互 使用文本文件保存配置信息 提供机制（可选的策略、是一种框架），而非策略，提供做大的灵活性。 四、Linux系统上常用命令的使用格式命令的语法通用格式：COMMAND OPTIONS ARGUMENTS COMMAND说明发起命令时将请求内核将某个二进制程序运行为一个进程，命令本身是一个可执行的程序文件，二进制格式的文件有可能会调用共享库文件。[遵循ELF格式规范] 多数系统命令程序文件都存放在：/bin,/sbin,/usr/bin,/usr/sbin,/usr/local/bin,/usr/local/sbin，它们又分为普通命令和管理命令。 普通命令：存放在/bin,/usr/bin,/usr/local/bin 管理命令：存放在/sbin,/usr/sbin,/usr/local/sbin 用到的库文件都存放在：/lib,/lib64,/usr/lib,/usr/lib64,/usr/local/lib,/usr/local/lib64，它们分为32位和64位的库文件，32位使用于32位的操作系统，64位使用于64位的操作系统，64位兼容32位，而32不兼容64 32位库：存放在/lib,/usr/lib,/usr/local/lib 64位库：存放在/lib64,/usr/lib64,/usr/local/lib64 命令分为两类：​由shell自带的命令，叫作内嵌命令(builtin) 独立的可执行程序文件，文件名即命令名，叫作外部命令 查看命令的内容的类型： file命令： 例：~]# file /bin/ls 查看命令的类型： type命令： 例：~]# type COMMAND 注意：并非所有的命令都有一个在某目录与之对应的可执行程序文件 OPTIONS说明：指定命令的运行特性，有两种表现形式： 短选项：-C，例如 ls -l ,-d 注：有的命令选项没有 – ，同一命令同时使用多个短选项可合并：ls -ld 长选项：–word，例如 ls –help，有时候选项也带参数，例：du -h –max-depth=1 注：长选项不能合并 ARGUMENTS说明：参数：命令的作用对象，命令对什么生效，例：ls /etc ,作用在/etc 。注：有些命令可以可同时带多个参数，以空白分隔 常用命令示例：ifconfig作用：显示和配置网络信息 语法：ifconfig [网络设备][参数] 示例：ifconfig -a echo作用：显示文本 语法：echo [-ne][字符串]或 echo [–help][–version] 示例：echo ‘Hello World’ tty作用：显示终端机连接标准输入设备的文件名称 语法：tty [-s][–help][–version] 示例：tty startx作用：进入图形操作界面 示例：startx &amp; export作用：设置或显示环境变量 语法：export [-fnp][变量名称]=[变量设置值] 示例： 123export JAVA_HOME = /home/myuser/jdk1.7.0_03export PATH = $JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar pwd作用：显示当前工作目录 语法：pwd[–help][–version] 示例：pwd history作用：列出bash保存的所有历史命令 语法：history [选项] 示例1：history 示例2:使用HISTTIMEFORMAT环境变量在历史中显示TIMESTAMP 123456789101112131415命令：export HISTTIMEFORMAT='%F %T '$history输出如下：642 2016-10-25 17:05:46 ll643 2016-10-25 17:05:46 rm 333 644 2016-10-25 17:05:46 ll /etc/fstab 645 2016-10-25 17:05:51 history --help646 2016-10-25 17:05:59 history -h647 2016-10-25 17:06:14 man history648 2016-10-25 17:07:53 history 649 2016-10-25 17:07:57 export HISTTIMEFORMAT='%F %T '650 2016-10-25 17:07:59 history shutdown作用：系统关机命令 语法：shutdown [-cfFhknr][-t 秒数][时间][警告信息] 示例：shuntdown -r +5 poweroff作用：关机 语法：这个命令还说啥语法啊，生产环境上不要随便执行这个命令，否则会被捆绑、滴蜡、爆菊啊~ 示例：poweroff reboot作用：重启 语法：运维常用作死命令之一，最好在头脑清醒的前提下执行。 示例：reboot hwclock作用：用来查询和设置硬件时钟 语法： 123-r, --show 读取并打印硬件时钟（read hardware clock and print result ）-s, --hctosys 将硬件时钟同步到系统时钟（set the system time from the hardware clock ）-w, --systohc 将系统时钟同步到硬件时钟（set the hardware clock to the current system time ） 示例： 12[root@centos ~]# hwclock -r2016年10月25日 星期二 17时32分28秒 -0.671802 seconds date作用：取一个特定时间的linux时间戳 语法：date [参数]… [+格式] 示例： 12[root@centos ~]# date2016年 10月 25日 星期二 17:33:17 CST 五、如何在Linux系统上获取命令的帮助信息，请详细列出，并描述man文档的章节时如何划分的获取命令的使用帮助：12345678内部命令： help COMMAND外部命令： (1) 命令自带简要格式的使用帮助 # COMMAND –help (2) 使用手册：manual 位置：/usr/share/man # man COMMAND 先执行type COMMNAD 识别是内部命令还是外部命令 12345678910111213141516171819(3) info COMMAND 获取命令的在线文档；(4) 很多应用程序会自带帮助文档：/usr/share/doc/APP-VERSION README：程序的相关的信息； INSTALL: 安装帮助； CHANGES：版本迭代时的改动信息；(5) 主流发行版官方文档 http://www.redhat.com/doc(6) 程序官方的文档： 官方站点上的“Document”(7) 搜索引擎 google、baidu keyword filetype:pdf （输入文章类型更有针对性） keyword site:domain.tld man 文档章节如何划分使用手册：压缩格式的文件，有章节之分； /usr/share/man man1, man2, … 123456781：用户命令； （普通用户和管理员）2：系统调用；3：C库调用；4：设备文件及特殊文件；5：文件格式；（配置文件格式）6：游戏使用帮助；7：杂项；8：管理工具及守护进行； Linux发行版的基础目录名称命名法则及其功用规定FHS：1FHS：全称Filesystem Hierarchy Standard，其定义了两层规范， /下面的各个目录应该要放什么数据：12345678910111213141516171819202122232425262728293031/bin：所有用户可用的基本命令程序文件；/sbin：供系统管理使用的工具程序；/boot：引导加载器必须用到的各静态文件：kernel，initramfs（initrd），grub等；/dev：存储特殊文件或设备文件；设备有两种类型：字符设备（线性设备）例如：键盘、显示器；块设备（随机设备）例如：硬盘、内存；/etc：系统程序的配置文件，只能为静态/home：普通用户的家目录的集中位置；一般每个普通用户的家目录默认为此目录下与用户名同名的子目录，/home/USERNAME；/root：管理员的家目录；可选/lib：为系统启动或根文件系统上的应用程序（/bin，/sbin等）提供共享库，以及为内核提供的内核参数模块； libc.so.：动态链接的C库； ld：运行时链接器/加载器； modules：用于存储内核模块的目录；/lib64：64位系统特有的存放64位共享库的路径；/media：便携式设备挂载点，cdrom，floppy等；/mnt：其它文件系统的临时挂载点；/opt：附加应用程序的安装位置；可选路径；/srv：当前主机为服务提供的数据；/tmp：为那些会产生临时文件的程序提供的用于存储临时文件的目录；可供所有用户执行写入操作；有特殊权限；/usr：usr Hierarchy，全局共享的只读数据路径；/var：/var Hierarchy，存储经常发生变化的数据的目录；","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zhusas.github.io/tags/linux/"}]},{"title":"MySQL启用的SSL连接的思考与实践","slug":"mysql-ssl","date":"2018-08-01T10:21:00.000Z","updated":"2018-08-02T02:36:02.010Z","comments":true,"path":"2018/08/01/mysql-ssl/","link":"","permalink":"https://zhusas.github.io/2018/08/01/mysql-ssl/","excerpt":"MySQL启用的SSL连接的思考与实践 由于工作上的业务发展和等保三级合规的要求，需要考虑为MySQL启用SSL连接，那么今天就来说说这个怎么玩。其实一个月前已经在实现了用docker跑MySQL SSL了，只不过后到今天才有时间静下心来总结一下。 有必要使用为MySQL启用SSL吗？先来了解一下SSL吧： SSL（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。","text":"MySQL启用的SSL连接的思考与实践 由于工作上的业务发展和等保三级合规的要求，需要考虑为MySQL启用SSL连接，那么今天就来说说这个怎么玩。其实一个月前已经在实现了用docker跑MySQL SSL了，只不过后到今天才有时间静下心来总结一下。 有必要使用为MySQL启用SSL吗？先来了解一下SSL吧： SSL（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。 SSL协议提供的功能主要有： ​ 1、 数据传输的机密性：利用对称密钥算法对传输的数据进行加密。 2.、身份验证机制：基于证书利用数字签名方法对服务器和客户端进行身份验证，其中客户端的身份验证是可选的。 3、 消息完整性验证：消息传输过程中使用MAC算法来检验消息的完整性。 如果用户的传输不是通过SSL的方式，那么其在网络中数据都是以明文进行传输的，而这给别有用心的人带来了可乘之机。所以，现在很多大型网站都开启了SSL功能。同样地，在我们数据库方面，如果客户端连接服务器获取数据不是使用SSL连接，那么在传输过程中，数据就有可能被窃取。 所以，我认为启用SSL是一个不错的选择。 那么SSL如何工作在MySQL中的这里分两说，因为工作中我涉及到MySQL5.6和MySQL 5.7两个版本，它们在SSL连接的实现上也有少许区别。 MySQL5.6的SSL MySQL 5.6中的SSL文档非常详细，它解释了SSL的工作原理。但首先让我们说清楚一点：MySQL支持使用TLS（传输层安全性）协议在客户端和服务器之间建立安全（加密）连接。 TLS有时被称为SSL（安全套接字层），但MySQL实际上并不使用SSL协议进行安全连接，因为它提供弱加密。 因此，当我们有人说MySQL正在使用SSL时，它实际上意味着它正在使用TLS。您可以使用以下命令检查您使用的协议： 123456show status like &apos;Ssl_version&apos;;+---------------+---------+| Variable_name | Value |+---------------+---------+| Ssl_version | TLSv1.2 |+---------------+---------+ TLS使用加密算法来确保可以信任通过公共网络接收的数据。它具有检测数据更改，丢失或重放的机制。 TLS还包含使用X509标准提供身份验证的算法。 X509可以识别互联网上的某个人。在基本术语中，应该有一些称为“证书颁发机构”（或CA）的实体，它将电子证书分配给需要它们的任何人。证书依赖于具有两个加密密钥（公钥和密钥）的非对称加密算法。证书所有者可以将证书提供给另一方作为身份证明。证书由其所有者的公钥组成。使用该公钥加密的任何数据只能使用由证书所有者持有的相应密钥解密。 MySQL5.6只支持TLSv1，MySQL5.7则支持TLSv1, TLSv1.1, and TLSv1.2 。 MySQL支持使用TLS协议的加密连接： 使用OpenSSL 1.0.1或更高版本编译时，MySQL支持TLSv1，TLSv1.1和TLSv1.2协议。 当使用捆绑版本的yaSSL进行编译时，MySQL支持TLSv1和TLSv1.1协议。 使用SSL配置服务器时，客户端必须具有客户端证书。获得后，它可以使用SSL连接到服务器。MySQL5.6的客户端必须指定密钥和证书。否则，我们无法使用SSL连接到服务器。 如下： my.cnf配置文件如下： 1234567891011121314151617[mysqld]skip-host-cacheskip-name-resolvepid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockdatadir = /var/lib/mysql#log-error = /var/log/mysql/error.log# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0ssl-ca=/etc/mysql/certs/ca.pemssl-cert=/etc/mysql/certs/MySQL1-cert.pemssl-key=/etc/mysql/certs/MySQL1-key.pem[client]ssl-ca=/etc/mysql/certs/ca.pemssl-cert=/etc/mysql/certs/MySQL-client-cert.pemssl-key=/etc/mysql/certs/MySQL-client-key.pem 客户端连接： 1mysql --ssl-ca=/etc/mysql/certs/ca.pem --ssl-cert=/etc/mysql/certs/MySQL-client-cert.pem --ssl-key=/etc/mysql/certs/MySQL-client-key.pem MySQL5.7的SSL 默认情况下，如果服务器支持加密连接，MySQL程序将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。有关影响加密连接使用的选项的信息 。MySQL基于每个连接执行加密，并且对给定用户使用加密可以是可选的或强制的。可以根据各个应用程序的要求选择加密或未加密的连接。在CREATE USER的时候，有SSL相关的参数可以选择，这个创建用户参数取决于其用户连接时，是否必须使用密钥文件连接MySQL。 这些在官方文档里面都有说明，可以去详细了解下。这里就不铺开了。 MySQL 5.7中的加密连接支持进行了一些改进。以下时间表总结了这些变化： 5.7.3：在客户端，明确的–ssl选项不再是建议性的，而是规定性的。如果服务器支持加密连接，则客户端程序可以通过仅指定–ssl选项来要求加密连接。 （以前，客户端必须指定–ssl-ca选项，或者所有三个–ssl-ca， –ssl-key和–ssl-cert选项。）连接尝试失败如果无法建立加密连接。客户端的其他–ssl-xxx选项在没有–ssl的情况下是建议性的：客户端尝试使用加密进行连接，但如果无法建立加密连接，则会回退到未加密的连接。 5.7.5：默认情况下启用服务器端–ssl选项值。 对于使用OpenSSL编译的服务器，auto_generate_certs和sha256_password_auto_generate_rsa_keys系统变量可用于在启动时启用SSL / RSA证书和密钥文件的自动生成和自动发现。对于证书和密钥自动发现，如果启用了–ssl并且未给出其他–ssl-xxx选项以明确配置加密连接，则服务器会在启动时尝试自动启用对加密连接的支持，如果它发现必需的证书和密钥文件在数据目录中。 5.7.6：mysql_ssl_rsa_setup实用程序可用于手动生成SSL / RSA证书和密钥文件。启动时自动发现SSL / RSA文件将扩展为适用于所有服务器，无论是使用OpenSSL还是使用yaSSL编译。 （这意味着无需启用auto_generate_certs即可进行自动发现。） 如果服务器在启动时发现CA证书是自签名的，则会向错误日志写入警告。 （如果服务器自动创建证书，则证书是自签名的，或者使用mysql_ssl_rsa_setup手动创建证书。） 5.7.7：如果服务器支持加密连接，则C客户端库会默认尝试建立加密连接。这会影响客户程序，如下所示： 如果没有–ssl选项，客户端将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。 显式–ssl选项或同义词（–ssl = 1， - enable-ssl）的存在是规定性的：客户端需要加密连接，如果无法建立，则会失败。 使用–ssl = 0选项或同义词（–skip-ssl， - disable-ssl），客户端使用未加密的连接.此更改还会影响基于C客户端库的MySQL连接器的后续版本：Connector / C，Connector / C ++和Connector / ODBC。 5.7.8：require_secure_transport系统变量可用于控制与服务器的客户端连接是否必须使用某种形式的安全传输。 5.7.10：TLS协议支持从TLSv1扩展到TLSv1.1和TLSv1.2。服务器端的tls_version系统变量和客户端的–tls-version选项可以选择支持级别。 5.7.11：MySQL客户端程序支持–ssl-mode选项，使您可以指定与服务器的连接的安全状态。 –ssl-mode选项包括客户端–ssl和–ssl-verify-server-cert选项的功能。因此，不推荐使用–ssl和–ssl-verify-server-cert，MySQL 8.0中已经删除它们。 好，上边说了这么多，各位都看明白了吗？不明白也没关系，我下面用docker来演示 坑点：我用许多客户端应用程序对它进行了测试，无论是MySQL5.6或5.7，MySQL客户端连接服务端时必须指定客户端密钥。没有密钥，无法连接到服务器。某些较旧的应用程序可能不支持此功能。 所以啊，官档说的也不一定全对。 实践这里以MySQL5.6为例 1、建立目录 1234# mkdir -pv mysql_ssl_&#123;data,config,cert&#125;mkdir: created directory 'mysql_ssl_data'mkdir: created directory 'mysql_ssl_config'mkdir: created directory 'mysql_ssl_cert' 准备好数据、证书、配置等文件 2、启动容器 1docker run --name mysql5.6_ssl_test -v /data/mysql_ssl_data/:/var/lib/mysql -v /data/mysql_ssl_config/my.cnf:/etc/my.cnf -v /data/mysql_ssl_cert/:/etc/mysql/certs -p 3306:3306 mysql:5.6.40 3、因为MySQL5.6默认用户是不开启SSL认证的，需要进行如下操作： 12345#修改已存在用户 GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509;#新建必须使用SSL用户grant all privileges on *.* to 'user'@'%' identified by '111111' with grant option;GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509; 对于具有REQUIRE X509的帐户，客户端必须指定要连接的–ssl-key和–ssl-cert选项。 （建议但不要求也指定–ssl-ca，以便验证服务器提供的公共证书。）对于ISSUER和SUBJECT也是如此，因为这些REQUIRE选项意味着X509的要求。 好，现在无论是用图形化工具还是使用命令行客户端，都必须指定客户端的证书及密钥文件，加上账户密码，才能连接登录MySQL了。 参考资料： https://www.cnblogs.com/mysql-dba/p/7061300.html https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html ​","categories":[],"tags":[{"name":"SSL,MySQL","slug":"SSL-MySQL","permalink":"https://zhusas.github.io/tags/SSL-MySQL/"}]},{"title":"MongoDB备份数据引擎升级","slug":"mongodb","date":"2018-07-09T05:38:00.000Z","updated":"2018-07-31T06:42:32.431Z","comments":true,"path":"2018/07/09/mongodb/","link":"","permalink":"https://zhusas.github.io/2018/07/09/mongodb/","excerpt":"MongoDB备份数据引擎升级准备工作 确认已经安装需要运行的MongoDB版本 确保有足够的空间进行数据导出导入 您必须使用MongoDB版本3.0或更高版本才能使用WireldTiger存储引擎。 如果使用较早的MongoDB版本，则必须在继续更改存储引擎之前升级MongoDB版本。本文使用的是MongoDB 3.6 本文使用docker来操作，请自行安装好docker环境。","text":"MongoDB备份数据引擎升级准备工作 确认已经安装需要运行的MongoDB版本 确保有足够的空间进行数据导出导入 您必须使用MongoDB版本3.0或更高版本才能使用WireldTiger存储引擎。 如果使用较早的MongoDB版本，则必须在继续更改存储引擎之前升级MongoDB版本。本文使用的是MongoDB 3.6 本文使用docker来操作，请自行安装好docker环境。 直接在裸机安装MongoDB 3.6进行操作亦可。 这里演示从MongoDB 2.6备份出来的数据还原到MongoDB 3.6 并以WireldTiger引擎启动运行 步骤 1、启动你要运行的MongoDB版本，本文用的是3.6 ，Docker运行，配置文件写明要以wiredTiger 启动。 1docker run -d --name $CONTAINER_NAME -v $DATA_PATH:/data/db -v $OLD_DATA_PATH:/data2 -v /$CONFIG_PATH/mongod.conf:/etc/mongod.conf.orig -p $IP:27017:27017 mongo:3.6 变量名 作用说明 $CONTAINER_NAME 自定义的容器名字 $DATA_PATH 容器在宿主机上的数据卷路径 $OLD_DATA_PATH 待升级的老版本MongoDB备份数据 $CONFIG_PATH 新版MongoDB的配置文件目录 $IP MongoDB容器对外提供服务的IP地址 配置文件 123456789101112131415161718192021# Where and how to store data.storage: dbPath: /var/lib/mongodb journal: enabled: true engine: wiredTiger# where to write logging data. systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log# network interfaces net: port: 27017 bindIp: 127.0.0.1# how the process runs processManagement: timeZoneInfo: /usr/share/zoneinfo 2、把 MongoDB 2.6的备份数据解压到$OLD_DATA_PATH 3、进入MongoDB 3.6的容器中执行以下命令 12docker exec -it $CONTAINER_NAME /bin/bash #进入docker并分配bash终端mongorestore data2/ #从data2目录中导入备份数据 OK，接下来静候佳音即可。中间会有一段漫长的导入数据，转换引擎，重建索引的过程。 当然，你要是土豪，用固态硬盘也是极好的。 4、最后一步，查看一下数据引擎。运行db.serverStatus()命令,查询结果包含如下内容即可： 12345\"storageEngine\" : &#123; \"name\" : \"wiredTiger\", \"supportsCommittedReads\" : true, \"readOnly\" : false, \"persistent\" : true","categories":[],"tags":[{"name":"MongoDB,Docker","slug":"MongoDB-Docker","permalink":"https://zhusas.github.io/tags/MongoDB-Docker/"}]}]}