<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhusas.github.io/"/>
  <updated>2018-08-02T06:24:08.496Z</updated>
  <id>https://zhusas.github.io/</id>
  
  <author>
    <name>Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux的基础知识</title>
    <link href="https://zhusas.github.io/2018/08/02/Linux%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://zhusas.github.io/2018/08/02/Linux的基础知识/</id>
    <published>2018-08-02T06:22:00.000Z</published>
    <updated>2018-08-02T06:24:08.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、计算机的组成及其功能"><a href="#一、计算机的组成及其功能" class="headerlink" title="一、计算机的组成及其功能"></a>一、计算机的组成及其功能</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="冯·洛伊曼体系"><a href="#冯·洛伊曼体系" class="headerlink" title="冯·洛伊曼体系"></a>冯·洛伊曼体系</h3><ol><li>控制器(Control)：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li><li>运算器(Datapath)：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li><li>存储器(Memory)：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li><li>输入(Input system)：输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</li><li>输出(Output system)：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li></ol><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="低级语言："><a href="#低级语言：" class="headerlink" title="低级语言："></a>低级语言：</h3><p>汇编语言，汇编器；写驱动</p><h3 id="高级语言："><a href="#高级语言：" class="headerlink" title="高级语言："></a>高级语言：</h3><p>系统级：C，C++，对性能要求较高的服务类程序<br>应用级：Java,Python,Ruby</p><h1 id="二、Linux-发行版有数百种之多，主要分三个主流分支"><a href="#二、Linux-发行版有数百种之多，主要分三个主流分支" class="headerlink" title="二、Linux 发行版有数百种之多，主要分三个主流分支"></a>二、Linux 发行版有数百种之多，主要分三个主流分支</h1><h2 id="RedHat-Enterprise-Linux"><a href="#RedHat-Enterprise-Linux" class="headerlink" title="RedHat Enterprise Linux"></a>RedHat Enterprise Linux</h2><p>Redhat系列，包括RHEL(Redhat Enterprise Linux，也就是所谓的Redhat Advance Server，收费版本)、Fedora Core(由原来的Redhat桌面版本发展而来，免费版本)、CentOS(RHEL的社区 克隆版本，免费)。Redhat是在国内使用人群最多的Linux版本，甚至有人将Redhat等同于Linux。所以这个版本的特点就是使用人群数量大，资料非常多，言下之意就是如果你有什么不明白的地方，很容易找到人来问，而且网上的一般Linux教程都是以Redhat为例来讲解的。Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用，但是Fedora Core的稳定性较差，最好只用于桌面应用。 </p><p>CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。每个版本的 CentOS都会获得十年的支持（通过安全更新方式）。新版本的 CentOS 大约每两年发行一次，而每个版本的 CentOS 会定期（大概每六个月）更新一次，以便支持新的硬件。这样，建立一个安全、低维护、稳定、高预测性、高重复性的 Linux 环境。CentOS是Community Enterprise Operating System的缩写。CentOS 是RHEL（Red Hat Enterprise Linux）源代码再编译的产物，而且在RHEL的基础上修正了不少已知的 Bug ，相对于其他 Linux 发行版，其稳定性值得信赖。</p><h2 id="Debian：只有社区的发行版"><a href="#Debian：只有社区的发行版" class="headerlink" title="Debian：只有社区的发行版"></a>Debian：只有社区的发行版</h2><p>Debian系列，包括Debian和Ubuntu等。Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。Debian最早由Ian Murdock于1993年创建，分为三个版本分支（branch）： stable, testing 和unstable。其中，unstable为最新的测试版本，其中包括最新的软件包，但是也有相对较多的bug，适合桌面用户。testing的版本都经过unstable中的测试，相对较为稳定，也支持了不少新技术（比如SMP等）。而stable一般只用于服务器，上面的软件包大部分都比较过时，但是稳定和安全性都非常的高。Debian最具特色的是apt-get / dpkg包管理方式，其实Redhat的YUM也是在模仿Debian的APT方式，但在二进制文件发行方式中，APT应该是最好的了。Debian的资料也很丰富，有很多支持的社区，有问题求教也有地方可去。Debian是包括Ubuntu在内许多发行版的上游，而Ubuntu又是Linux Mint及其他发行版的上游。Debian在服务器和桌面电脑领域都有着广泛的应用。Debian是一个纯开源计划并着重在一个关键点上，稳定性。它同时也提供了最大的和完整的软件仓库给用户。 </p><p>Ubuntu是基于Debian的unstable版本加强而来，可以这么说，Ubuntu就是一个拥有Debian所有的优点，以及自己所加强的优点的近乎完美的 Linux桌面系统。根据选择的桌面系统不同，有三个版本可供选择，基于Gnome的Ubuntu，基于KDE的Kubuntu以及基于Xfc的Xubuntu。特点是界面非常友好，容易上手，对硬件的支持非常全面，是最适合做桌面系统的Linux发行版本。</p><h2 id="Slackware-Linux"><a href="#Slackware-Linux" class="headerlink" title="Slackware Linux"></a>Slackware Linux</h2><p>Slackware Linux是由Patrick Volkerding开发的GNU/Linux发行版。与很多其他的发行版不同，它坚持KISS(Keep It Simple Stupid)的原则。一开始，配置系统会有一些困难，但是更有经验的用户会喜欢这种方式的透明性和灵活性。 Slackware 很多特性体现出了KISS原则，最为有名的一些例子就是不依赖图形界面的文本化系统配置、传统的服务管理方式和不解决依赖的包管理方式。它的最大特点就是安装灵活，目录结构严谨，版本力求稳定而非追新。Slackware的软件包都是通常的tgz(tar/gzip) 或者txz(xz) 格式文件再加上安装脚本。Tgz/Txz 对于有经验的用户来说，比RPM更为灵活，并避免了APT 之类管理器可能带来的的依赖地狱。</p><p>作为开源软件，Slackware与商业版本的关系并不大，但与几家提供付费支持的厂商一直保持的合作关系。作为最早的可用版本之一，Slackware Linux是由Patrick Volkerding开发的GNU/Linux发行版。与很多其他的发行版不同，它坚持KISS(Keep It Simple Stupid)的原则，就是说尽量不依赖配置系统的图形界面工具。其安装程序也是一些Dialog界面的shell脚本写成，你可以在安装的任何时候跳到任何安装步骤，而且这些脚本在安装之后也可以很方便的使用</p><p>Slackware与其他的发行版本（Red Hat、Debian、Gentoo、SuSE、 Mandriva、Ubuntu等）不同的道路，它力图成为“UNIX风格”的Linux发行版本。只吸收稳定版本的应用程序，并且缺少其他linux版本中那些为发行版本定制的配置工具。在当今systemd大势所趋的情况下，Slackware仍然坚持BSD启动风格。</p><p>Slackware主要为x86 PC开发，从2005年起开始出现针对System/390架构的官方移植。同时ARM、DEC Alpha、SPARC和PowerPC也存在一些非官方的移植。Slackware官方维护着一个开发版本（Slackware Current），不断有新的软件被加入到这个源，用户可以实现类似Archlinux的滚动升级，等到一个开发版本足够稳定，便会发布一个稳定版。Slackware是支持x86、amd64（即x86_64）、ARM、Alpha、SPARC、PowerPC的一套GNU/Linux操作系统，其正式发布由PatrickVolkerding 负责。</p><h2 id="Linux发行版汇总"><a href="#Linux发行版汇总" class="headerlink" title="Linux发行版汇总"></a>Linux发行版汇总</h2><p><img src="http://i.imgur.com/JMpVlhj.png" alt=""></p><h2 id="Linux各发行版的联系与区别："><a href="#Linux各发行版的联系与区别：" class="headerlink" title="Linux各发行版的联系与区别："></a>Linux各发行版的联系与区别：</h2><h3 id="联系："><a href="#联系：" class="headerlink" title="联系："></a>联系：</h3><ol><li>各发行版本均采用Linux的内核（kernel）；</li><li>各发行版本均遵守GPL版权协定；</li><li>各发行版本均遵循 Linux Standard Base (LSB)等标准来开发；</li><li>各发行版本均遵循FHS（File system Hierarchy Standard）标准规范；</li></ol><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol><li>不同的发行版采用的软件包管理方式不同；最有名的是 debain 的 deb 包，redhat 的 rpm 包，slackware 等的 tgz 包。</li><li>发行初衷不同，导致特点也不同，见下图：</li></ol><p><img src="http://i.imgur.com/xE0k8AB.png" alt=""></p><h1 id="三、Linux的哲学思想"><a href="#三、Linux的哲学思想" class="headerlink" title="三、Linux的哲学思想"></a>三、Linux的哲学思想</h1><ol><li>一切皆文件</li><li>由众多的单一的程序完成一件比较复杂的工作，一个程序只做一件事，并且做好他。</li><li>尽量避免与用户交互</li><li>使用文本文件保存配置信息</li><li>提供机制（可选的策略、是一种框架），而非策略，提供做大的灵活性。</li></ol><h1 id="四、Linux系统上常用命令的使用格式"><a href="#四、Linux系统上常用命令的使用格式" class="headerlink" title="四、Linux系统上常用命令的使用格式"></a>四、Linux系统上常用命令的使用格式</h1><h2 id="命令的语法通用格式："><a href="#命令的语法通用格式：" class="headerlink" title="命令的语法通用格式："></a>命令的语法通用格式：</h2><p>COMMAND OPTIONS ARGUMENTS</p><h3 id="COMMAND说明"><a href="#COMMAND说明" class="headerlink" title="COMMAND说明"></a>COMMAND说明</h3><p>发起命令时将请求内核将某个二进制程序运行为一个进程，命令本身是一个可执行的程序文件，二进制格式的文件有可能会调用共享库文件。[遵循ELF格式规范]</p><p>多数系统命令程序文件都存放在：/bin,/sbin,/usr/bin,/usr/sbin,/usr/local/bin,/usr/local/sbin，它们又分为普通命令和管理命令。 </p><p>普通命令：存放在/bin,/usr/bin,/usr/local/bin </p><p>管理命令：存放在/sbin,/usr/sbin,/usr/local/sbin </p><p>用到的库文件都存放在：/lib,/lib64,/usr/lib,/usr/lib64,/usr/local/lib,/usr/local/lib64，它们分为32位和64位的库文件，32位使用于32位的操作系统，64位使用于64位的操作系统，64位兼容32位，而32不兼容64 </p><p>32位库：存放在/lib,/usr/lib,/usr/local/lib </p><p>64位库：存放在/lib64,/usr/lib64,/usr/local/lib64 </p><h3 id="命令分为两类："><a href="#命令分为两类：" class="headerlink" title="命令分为两类："></a>命令分为两类：</h3><p>​<br>由shell自带的命令，叫作内嵌命令(builtin) </p><p>独立的可执行程序文件，文件名即命令名，叫作外部命令 </p><p>查看命令的内容的类型： </p><p>file命令：</p><p>例：~]# file /bin/ls </p><p>查看命令的类型： </p><p>type命令： </p><p>例：~]# type COMMAND </p><p>注意：并非所有的命令都有一个在某目录与之对应的可执行程序文件</p><h3 id="OPTIONS说明："><a href="#OPTIONS说明：" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><p>指定命令的运行特性，有两种表现形式： </p><p>短选项：-C，例如 ls -l ,-d 注：有的命令选项没有 – ，同一命令同时使用多个短选项可合并：ls -ld </p><p>长选项：–word，例如 ls –help，有时候选项也带参数，例：du -h –max-depth=1 注：长选项不能合并 </p><h3 id="ARGUMENTS说明："><a href="#ARGUMENTS说明：" class="headerlink" title="ARGUMENTS说明："></a>ARGUMENTS说明：</h3><p>参数：命令的作用对象，命令对什么生效，例：ls /etc ,作用在/etc 。注：有些命令可以可同时带多个参数，以空白分隔</p><h2 id="常用命令示例："><a href="#常用命令示例：" class="headerlink" title="常用命令示例："></a>常用命令示例：</h2><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>作用：显示和配置网络信息</p><p>语法：ifconfig [网络设备][参数]</p><p>示例：ifconfig -a</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>作用：显示文本</p><p>语法：echo [-ne][字符串]或 echo [–help][–version]</p><p>示例：echo ‘Hello World’</p><h3 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h3><p>作用：显示终端机连接标准输入设备的文件名称</p><p>语法：tty [-s][–help][–version]</p><p>示例：tty</p><h3 id="startx"><a href="#startx" class="headerlink" title="startx"></a>startx</h3><p>作用：进入图形操作界面</p><p>示例：startx &amp;</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>作用：设置或显示环境变量</p><p>语法：export [-fnp][变量名称]=[变量设置值]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME = /home/myuser/jdk1.7.0_03</span><br><span class="line"><span class="built_in">export</span> PATH = <span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>作用：显示当前工作目录</p><p>语法：pwd[–help][–version]</p><p>示例：pwd</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>作用：列出bash保存的所有历史命令</p><p>语法：history  [选项]</p><p>示例1：history</p><p>示例2:使用HISTTIMEFORMAT环境变量在历史中显示TIMESTAMP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">'%F %T '</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$history</span></span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">642  2016-10-25 17:05:46 ll</span><br><span class="line">643  2016-10-25 17:05:46 rm 333 </span><br><span class="line">644  2016-10-25 17:05:46 ll /etc/fstab </span><br><span class="line">645  2016-10-25 17:05:51 <span class="built_in">history</span> --<span class="built_in">help</span></span><br><span class="line">646  2016-10-25 17:05:59 <span class="built_in">history</span> -h</span><br><span class="line">647  2016-10-25 17:06:14 man <span class="built_in">history</span></span><br><span class="line">648  2016-10-25 17:07:53 <span class="built_in">history</span> </span><br><span class="line">649  2016-10-25 17:07:57 <span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">'%F %T '</span></span><br><span class="line">650  2016-10-25 17:07:59 <span class="built_in">history</span></span><br></pre></td></tr></table></figure><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>作用：系统关机命令</p><p>语法：shutdown [-cfFhknr][-t 秒数][时间][警告信息]</p><p>示例：shuntdown -r +5</p><h3 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h3><p>作用：关机</p><p>语法：这个命令还说啥语法啊，生产环境上不要随便执行这个命令，否则会被捆绑、滴蜡、爆菊啊<del>~</del></p><p>示例：poweroff</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>作用：重启</p><p>语法：运维常用作死命令之一，最好在头脑清醒的前提下执行。</p><p>示例：reboot</p><h3 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h3><p>作用：用来查询和设置硬件时钟</p><p>语法：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-r, --show        读取并打印硬件时钟（<span class="built_in">read</span> hardware clock and <span class="built_in">print</span> result ）</span><br><span class="line">-s, --hctosys     将硬件时钟同步到系统时钟（<span class="built_in">set</span> the system time from the hardware clock ）</span><br><span class="line">-w, --systohc     将系统时钟同步到硬件时钟（<span class="built_in">set</span> the hardware clock to the current system time ）</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># hwclock -r</span></span><br><span class="line">2016年10月25日 星期二 17时32分28秒  -0.671802 seconds</span><br></pre></td></tr></table></figure><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>作用：取一个特定时间的linux时间戳</p><p>语法：date [参数]… [+格式]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># date</span></span><br><span class="line">2016年 10月 25日 星期二 17:33:17 CST</span><br></pre></td></tr></table></figure><h1 id="五、如何在Linux系统上获取命令的帮助信息，请详细列出，并描述man文档的章节时如何划分的"><a href="#五、如何在Linux系统上获取命令的帮助信息，请详细列出，并描述man文档的章节时如何划分的" class="headerlink" title="五、如何在Linux系统上获取命令的帮助信息，请详细列出，并描述man文档的章节时如何划分的"></a>五、如何在Linux系统上获取命令的帮助信息，请详细列出，并描述man文档的章节时如何划分的</h1><h2 id="获取命令的使用帮助："><a href="#获取命令的使用帮助：" class="headerlink" title="获取命令的使用帮助："></a>获取命令的使用帮助：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">内部命令：</span><br><span class="line">    <span class="built_in">help</span> COMMAND</span><br><span class="line">外部命令：</span><br><span class="line">    (1) 命令自带简要格式的使用帮助</span><br><span class="line">        <span class="comment"># COMMAND –help</span></span><br><span class="line">    (2) 使用手册：manual</span><br><span class="line">        位置：/usr/share/man</span><br><span class="line">        <span class="comment"># man COMMAND</span></span><br></pre></td></tr></table></figure><p>先执行type COMMNAD 识别是内部命令还是外部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(3) info COMMAND</span><br><span class="line">    获取命令的在线文档；</span><br><span class="line"></span><br><span class="line">(4) 很多应用程序会自带帮助文档：/usr/share/doc/APP-VERSION</span><br><span class="line">    README：程序的相关的信息；</span><br><span class="line">    INSTALL: 安装帮助；</span><br><span class="line">    CHANGES：版本迭代时的改动信息；</span><br><span class="line"></span><br><span class="line">(5) 主流发行版官方文档</span><br><span class="line">    http://www.redhat.com/doc</span><br><span class="line"></span><br><span class="line">(6) 程序官方的文档：</span><br><span class="line">    官方站点上的“Document”</span><br><span class="line"></span><br><span class="line">(7) 搜索引擎</span><br><span class="line">    google、baidu </span><br><span class="line"></span><br><span class="line">    keyword filetype:pdf   （输入文章类型更有针对性）</span><br><span class="line">    keyword site:domain.tld</span><br></pre></td></tr></table></figure><h2 id="man-文档章节如何划分"><a href="#man-文档章节如何划分" class="headerlink" title="man 文档章节如何划分"></a>man 文档章节如何划分</h2><p>使用手册：压缩格式的文件，有章节之分；<br>                    /usr/share/man<br>                        man1, man2, …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1：用户命令；  （普通用户和管理员）</span><br><span class="line">2：系统调用；</span><br><span class="line">3：C库调用；</span><br><span class="line">4：设备文件及特殊文件；</span><br><span class="line">5：文件格式；（配置文件格式）</span><br><span class="line">6：游戏使用帮助；</span><br><span class="line">7：杂项；</span><br><span class="line">8：管理工具及守护进行；</span><br></pre></td></tr></table></figure><h1 id="请罗列Linux发行版的基础目录名称命名法则及其功用规定"><a href="#请罗列Linux发行版的基础目录名称命名法则及其功用规定" class="headerlink" title="请罗列Linux发行版的基础目录名称命名法则及其功用规定"></a>请罗列Linux发行版的基础目录名称命名法则及其功用规定</h1><h2 id="FHS："><a href="#FHS：" class="headerlink" title="FHS："></a>FHS：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FHS：全称Filesystem Hierarchy Standard，其定义了两层规范，</span><br></pre></td></tr></table></figure><h2 id="下面的各个目录应该要放什么数据："><a href="#下面的各个目录应该要放什么数据：" class="headerlink" title="/下面的各个目录应该要放什么数据："></a>/下面的各个目录应该要放什么数据：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/bin：所有用户可用的基本命令程序文件；</span><br><span class="line"></span><br><span class="line">/sbin：供系统管理使用的工具程序；</span><br><span class="line"></span><br><span class="line">/boot：引导加载器必须用到的各静态文件：kernel，initramfs（initrd），grub等；</span><br><span class="line"></span><br><span class="line">/dev：存储特殊文件或设备文件；设备有两种类型：字符设备（线性设备）例如：键盘、显示器；块设备（随机设备）例如：硬盘、内存；</span><br><span class="line"></span><br><span class="line">/etc：系统程序的配置文件，只能为静态</span><br><span class="line"></span><br><span class="line">/home：普通用户的家目录的集中位置；一般每个普通用户的家目录默认为此目录下与用户名同名的子目录，/home/USERNAME；</span><br><span class="line"></span><br><span class="line">/root：管理员的家目录；可选</span><br><span class="line"></span><br><span class="line">/lib：为系统启动或根文件系统上的应用程序（/bin，/sbin等）提供共享库，以及为内核提供的内核参数模块； libc.so.：动态链接的C库； ld：运行时链接器/加载器； modules：用于存储内核模块的目录；</span><br><span class="line"></span><br><span class="line">/lib64：64位系统特有的存放64位共享库的路径；</span><br><span class="line"></span><br><span class="line">/media：便携式设备挂载点，cdrom，floppy等；</span><br><span class="line"></span><br><span class="line">/mnt：其它文件系统的临时挂载点；</span><br><span class="line"></span><br><span class="line">/opt：附加应用程序的安装位置；可选路径；</span><br><span class="line"></span><br><span class="line">/srv：当前主机为服务提供的数据；</span><br><span class="line"></span><br><span class="line">/tmp：为那些会产生临时文件的程序提供的用于存储临时文件的目录；可供所有用户执行写入操作；有特殊权限；</span><br><span class="line"></span><br><span class="line">/usr：usr Hierarchy，全局共享的只读数据路径；</span><br><span class="line"></span><br><span class="line">/var：/var Hierarchy，存储经常发生变化的数据的目录；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、计算机的组成及其功能&quot;&gt;&lt;a href=&quot;#一、计算机的组成及其功能&quot; class=&quot;headerlink&quot; title=&quot;一、计算机的组成及其功能&quot;&gt;&lt;/a&gt;一、计算机的组成及其功能&lt;/h1&gt;&lt;h2 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://zhusas.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL启用的SSL连接的思考与实践</title>
    <link href="https://zhusas.github.io/2018/08/01/mysql-ssl/"/>
    <id>https://zhusas.github.io/2018/08/01/mysql-ssl/</id>
    <published>2018-08-01T10:21:00.000Z</published>
    <updated>2018-08-02T02:36:02.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL启用的SSL连接的思考与实践"><a href="#MySQL启用的SSL连接的思考与实践" class="headerlink" title="MySQL启用的SSL连接的思考与实践"></a>MySQL启用的SSL连接的思考与实践</h2><p><img src="/2018/08/01/mysql-ssl/bodyguard.jpg" alt="SSL"></p><p>由于工作上的业务发展和等保三级合规的要求，需要考虑为MySQL启用SSL连接，那么今天就来说说这个怎么玩。其实一个月前已经在实现了用docker跑MySQL SSL了，只不过后到今天才有时间静下心来总结一下。</p><h3 id="有必要使用为MySQL启用SSL吗？"><a href="#有必要使用为MySQL启用SSL吗？" class="headerlink" title="有必要使用为MySQL启用SSL吗？"></a>有必要使用为MySQL启用SSL吗？</h3><p>先来了解一下SSL吧：</p><p><strong>SSL</strong>（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。<a id="more"></a></p><p>SSL协议提供的功能主要有：</p><p>​    1、 数据传输的机密性：利用对称密钥算法对传输的数据进行加密。<br>    2.、身份验证机制：基于证书利用数字签名方法对服务器和客户端进行身份验证，其中客户端的身份验证是可选的。<br>    3、 消息完整性验证：消息传输过程中使用MAC算法来检验消息的完整性。</p><p>如果用户的传输不是通过SSL的方式，那么其在网络中数据都是以明文进行传输的，而这给别有用心的人带来了可乘之机。所以，现在很多大型网站都开启了SSL功能。同样地，在我们数据库方面，如果客户端连接服务器获取数据不是使用SSL连接，那么在传输过程中，数据就有可能被窃取。</p><p>所以，我认为启用SSL是一个不错的选择。</p><h3 id="那么SSL如何工作在MySQL中的"><a href="#那么SSL如何工作在MySQL中的" class="headerlink" title="那么SSL如何工作在MySQL中的"></a>那么SSL如何工作在MySQL中的</h3><p>这里分两说，因为工作中我涉及到MySQL5.6和MySQL 5.7两个版本，它们在SSL连接的实现上也有少许区别。</p><p><strong>MySQL5.6的SSL</strong></p><p>MySQL  5.6中的SSL文档非常详细，它解释了SSL的工作原理。但首先让我们说清楚一点：MySQL支持使用TLS（传输层安全性）协议在客户端和服务器之间建立安全（加密）连接。 TLS有时被称为SSL（安全套接字层），但MySQL实际上并不使用SSL协议进行安全连接，因为它提供弱加密。 </p><p>因此，当我们有人说MySQL正在使用SSL时，它实际上意味着它正在使用TLS。您可以使用以下命令检查您使用的协议： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;Ssl_version&apos;;</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| Ssl_version | TLSv1.2 |</span><br><span class="line">+---------------+---------+</span><br></pre></td></tr></table></figure><p>TLS使用加密算法来确保可以信任通过公共网络接收的数据。它具有检测数据更改，丢失或重放的机制。 TLS还包含使用X509标准提供身份验证的算法。  X509可以识别互联网上的某个人。在基本术语中，应该有一些称为“证书颁发机构”（或CA）的实体，它将电子证书分配给需要它们的任何人。证书依赖于具有两个加密密钥（公钥和密钥）的非对称加密算法。证书所有者可以将证书提供给另一方作为身份证明。证书由其所有者的公钥组成。使用该公钥加密的任何数据只能使用由证书所有者持有的相应密钥解密。</p><p>MySQL5.6只支持TLSv1，MySQL5.7则支持TLSv1, TLSv1.1, and TLSv1.2 。</p><p>MySQL支持使用TLS协议的加密连接：<br>    使用OpenSSL 1.0.1或更高版本编译时，MySQL支持TLSv1，TLSv1.1和TLSv1.2协议。<br>    当使用捆绑版本的yaSSL进行编译时，MySQL支持TLSv1和TLSv1.1协议。 </p><p>使用SSL配置服务器时，客户端必须具有客户端证书。获得后，它可以使用SSL连接到服务器。MySQL5.6的客户端必须指定密钥和证书。否则，我们无法使用SSL连接到服务器。 如下：</p><p>my.cnf配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line">pid-file= /var/run/mysqld/mysqld.pid</span><br><span class="line">socket= /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir= /var/lib/mysql</span><br><span class="line">#log-error= /var/log/mysql/error.log</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">ssl-ca=/etc/mysql/certs/ca.pem</span><br><span class="line">ssl-cert=/etc/mysql/certs/MySQL1-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/certs/MySQL1-key.pem</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">ssl-ca=/etc/mysql/certs/ca.pem</span><br><span class="line">ssl-cert=/etc/mysql/certs/MySQL-client-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/certs/MySQL-client-key.pem</span><br></pre></td></tr></table></figure><p>客户端连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --ssl-ca=/etc/mysql/certs/ca.pem  --ssl-cert=/etc/mysql/certs/MySQL-client-cert.pem --ssl-key=/etc/mysql/certs/MySQL-client-key.pem</span><br></pre></td></tr></table></figure><p><strong>MySQL5.7的SSL</strong></p><p>默认情况下，如果服务器支持加密连接，MySQL程序将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。有关影响加密连接使用的选项的信息 。<br>MySQL基于每个连接执行加密，并且对给定用户使用加密可以是可选的或强制的。可以根据各个应用程序的要求选择加密或未加密的连接。在CREATE USER的时候，有SSL相关的参数可以选择，这个创建用户参数取决于其用户连接时，是否必须使用密钥文件连接MySQL。</p><p>这些在官方文档里面都有说明，可以去详细了解下。这里就不铺开了。</p><p><strong>MySQL 5.7中的加密连接支持进行了一些改进。以下时间表总结了这些变化：</strong>        </p><p>5.7.3：在客户端，明确的–ssl选项不再是建议性的，而是规定性的。如果服务器支持加密连接，则客户端程序可以通过仅指定–ssl选项来要求加密连接。 （以前，客户端必须指定–ssl-ca选项，或者所有三个–ssl-ca， –ssl-key和–ssl-cert选项。）连接尝试失败如果无法建立加密连接。客户端的其他–ssl-xxx选项在没有–ssl的情况下是建议性的：客户端尝试使用加密进行连接，但如果无法建立加密连接，则会回退到未加密的连接。        </p><p>5.7.5：默认情况下启用服务器端–ssl选项值。        对于使用OpenSSL编译的服务器，auto_generate_certs和sha256_password_auto_generate_rsa_keys系统变量可用于在启动时启用SSL /  RSA证书和密钥文件的自动生成和自动发现。对于证书和密钥自动发现，如果启用了–ssl并且未给出其他–ssl-xxx选项以明确配置加密连接，则服务器会在启动时尝试自动启用对加密连接的支持，如果它发现必需的证书和密钥文件在数据目录中。        </p><p>5.7.6：mysql_ssl_rsa_setup实用程序可用于手动生成SSL / RSA证书和密钥文件。启动时自动发现SSL / RSA文件将扩展为适用于所有服务器，无论是使用OpenSSL还是使用yaSSL编译。  （这意味着无需启用auto_generate_certs即可进行自动发现。）        如果服务器在启动时发现CA证书是自签名的，则会向错误日志写入警告。 （如果服务器自动创建证书，则证书是自签名的，或者使用mysql_ssl_rsa_setup手动创建证书。）        </p><p>5.7.7：如果服务器支持加密连接，则C客户端库会默认尝试建立加密连接。这会影响客户程序，如下所示：            </p><ul><li>如果没有–ssl选项，客户端将尝试使用加密进行连接，如果无法建立加密连接，则会回退到未加密的连接。            </li><li>显式–ssl选项或同义词（–ssl = 1， -  enable-ssl）的存在是规定性的：客户端需要加密连接，如果无法建立，则会失败。</li><li>使用–ssl = 0选项或同义词（–skip-ssl， -  disable-ssl），客户端使用未加密的连接.此更改还会影响基于C客户端库的MySQL连接器的后续版本：Connector / C，Connector / C ++和Connector / ODBC。        </li></ul><p>5.7.8：require_secure_transport系统变量可用于控制与服务器的客户端连接是否必须使用某种形式的安全传输。        </p><p>5.7.10：TLS协议支持从TLSv1扩展到TLSv1.1和TLSv1.2。服务器端的tls_version系统变量和客户端的–tls-version选项可以选择支持级别。   </p><p>5.7.11：MySQL客户端程序支持–ssl-mode选项，使您可以指定与服务器的连接的安全状态。  –ssl-mode选项包括客户端–ssl和–ssl-verify-server-cert选项的功能。因此，不推荐使用–ssl和–ssl-verify-server-cert，MySQL 8.0中已经删除它们。 </p><p>好，上边说了这么多，各位都看明白了吗？不明白也没关系，我下面用docker来演示</p><p><strong>坑点：我用许多客户端应用程序对它进行了测试，无论是MySQL5.6或5.7，MySQL客户端连接服务端时必须指定客户端密钥。没有密钥，无法连接到服务器。某些较旧的应用程序可能不支持此功能。 所以啊，官档说的也不一定全对。</strong></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>这里以MySQL5.6为例</p><p>1、建立目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir -pv mysql_ssl_&#123;data,config,cert&#125;</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_data'</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_config'</span></span><br><span class="line">mkdir: created directory <span class="string">'mysql_ssl_cert'</span></span><br></pre></td></tr></table></figure><p>准备好数据、证书、配置等文件</p><p>2、启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql5.6_ssl_test -v /data/mysql_ssl_data/:/var/lib/mysql -v /data/mysql_ssl_config/my.cnf:/etc/my.cnf -v /data/mysql_ssl_cert/:/etc/mysql/certs -p 3306:3306 mysql:5.6.40</span><br></pre></td></tr></table></figure><p>3、因为MySQL5.6默认用户是不开启SSL认证的，需要进行如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改已存在用户 </span></span><br><span class="line">GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509;</span><br><span class="line"><span class="comment">#新建必须使用SSL用户</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'user'</span>@<span class="string">'%'</span> identified by <span class="string">'111111'</span> with grant option;</span><br><span class="line">GRANT USAGE ON *.* TO `user`@`%` REQUIRE X509;</span><br></pre></td></tr></table></figure><p>对于具有REQUIRE  X509的帐户，客户端必须指定要连接的–ssl-key和–ssl-cert选项。  （建议但不要求也指定–ssl-ca，以便验证服务器提供的公共证书。）对于ISSUER和SUBJECT也是如此，因为这些REQUIRE选项意味着X509的要求。 </p><p>好，现在无论是用图形化工具还是使用命令行客户端，都必须指定客户端的证书及密钥文件，加上账户密码，才能连接登录MySQL了。</p><p><strong>参考资料：</strong></p><p><a href="https://www.cnblogs.com/mysql-dba/p/7061300.html" target="_blank" rel="noopener">https://www.cnblogs.com/mysql-dba/p/7061300.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols-ciphers.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html</a></p><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL启用的SSL连接的思考与实践&quot;&gt;&lt;a href=&quot;#MySQL启用的SSL连接的思考与实践&quot; class=&quot;headerlink&quot; title=&quot;MySQL启用的SSL连接的思考与实践&quot;&gt;&lt;/a&gt;MySQL启用的SSL连接的思考与实践&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/08/01/mysql-ssl/bodyguard.jpg&quot; alt=&quot;SSL&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于工作上的业务发展和等保三级合规的要求，需要考虑为MySQL启用SSL连接，那么今天就来说说这个怎么玩。其实一个月前已经在实现了用docker跑MySQL SSL了，只不过后到今天才有时间静下心来总结一下。&lt;/p&gt;
&lt;h3 id=&quot;有必要使用为MySQL启用SSL吗？&quot;&gt;&lt;a href=&quot;#有必要使用为MySQL启用SSL吗？&quot; class=&quot;headerlink&quot; title=&quot;有必要使用为MySQL启用SSL吗？&quot;&gt;&lt;/a&gt;有必要使用为MySQL启用SSL吗？&lt;/h3&gt;&lt;p&gt;先来了解一下SSL吧：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSL&lt;/strong&gt;（Secure Socket Layer：安全套接字层）利用数据加密、身份验证和消息完整性验证机制，为基于TCP等可靠连接的应用层协议提供安全性保证。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSL,MySQL" scheme="https://zhusas.github.io/tags/SSL-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB备份数据引擎升级</title>
    <link href="https://zhusas.github.io/2018/07/09/mongodb/"/>
    <id>https://zhusas.github.io/2018/07/09/mongodb/</id>
    <published>2018-07-09T05:38:00.000Z</published>
    <updated>2018-07-31T06:42:32.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB备份数据引擎升级"><a href="#MongoDB备份数据引擎升级" class="headerlink" title="MongoDB备份数据引擎升级"></a>MongoDB备份数据引擎升级</h2><p><strong>准备工作</strong></p><ol><li>确认已经安装需要运行的MongoDB版本</li><li>确保有足够的空间进行数据导出导入</li><li>您必须使用MongoDB版本3.0或更高版本才能使用WireldTiger存储引擎。 如果使用较早的MongoDB版本，则必须在继续更改存储引擎之前升级MongoDB版本。本文使用的是MongoDB 3.6</li><li>本文使用docker来操作，请自行安装好docker环境。<a id="more"></a></li><li>直接在裸机安装MongoDB 3.6进行操作亦可。</li><li>这里演示从MongoDB 2.6备份出来的数据还原到MongoDB 3.6 并以WireldTiger引擎启动运行</li></ol><p><strong>步骤</strong></p><p>1、启动你要运行的MongoDB版本，本文用的是3.6 ，Docker运行，配置文件写明要以<code>wiredTiger</code>  启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name <span class="variable">$CONTAINER_NAME</span> -v <span class="variable">$DATA_PATH</span>:/data/db -v <span class="variable">$OLD_DATA_PATH</span>:/data2 -v /<span class="variable">$CONFIG_PATH</span>/mongod.conf:/etc/mongod.conf.orig -p <span class="variable">$IP</span>:27017:27017 mongo:3.6</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">作用说明</th></tr></thead><tbody><tr><td style="text-align:center">$CONTAINER_NAME</td><td style="text-align:center">自定义的容器名字</td></tr><tr><td style="text-align:center">$DATA_PATH</td><td style="text-align:center">容器在宿主机上的数据卷路径</td></tr><tr><td style="text-align:center">$OLD_DATA_PATH</td><td style="text-align:center">待升级的老版本MongoDB备份数据</td></tr><tr><td style="text-align:center">$CONFIG_PATH</td><td style="text-align:center">新版MongoDB的配置文件目录</td></tr><tr><td style="text-align:center">$IP</td><td style="text-align:center">MongoDB容器对外提供服务的IP地址</td></tr></tbody></table><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  dbPath:</span> <span class="string">/var/lib/mongodb</span></span><br><span class="line"><span class="attr">    journal:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    engine:</span> <span class="string">wiredTiger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">  systemLog:</span></span><br><span class="line"><span class="attr">    destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/var/log/mongodb/mongod.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">    net:</span></span><br><span class="line"><span class="attr">     port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">     bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">    processManagement:</span></span><br><span class="line"><span class="attr">    timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br></pre></td></tr></table></figure><p>2、把 MongoDB 2.6的备份数据解压到$OLD_DATA_PATH</p><p>3、进入MongoDB 3.6的容器中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$CONTAINER_NAME</span> /bin/bash <span class="comment">#进入docker并分配bash终端</span></span><br><span class="line">mongorestore data2/<span class="comment">#从data2目录中导入备份数据</span></span><br></pre></td></tr></table></figure><p>OK，接下来静候佳音即可。中间会有一段漫长的导入数据，转换引擎，重建索引的过程。</p><p>当然，你要是土豪，用固态硬盘也是极好的。</p><p>4、最后一步，查看一下数据引擎。运行db.serverStatus()命令,查询结果包含如下内容即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"storageEngine" : &#123;</span><br><span class="line">"name" : "wiredTiger",</span><br><span class="line">"supportsCommittedReads" : true,</span><br><span class="line">"readOnly" : false,</span><br><span class="line">"persistent" : true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MongoDB备份数据引擎升级&quot;&gt;&lt;a href=&quot;#MongoDB备份数据引擎升级&quot; class=&quot;headerlink&quot; title=&quot;MongoDB备份数据引擎升级&quot;&gt;&lt;/a&gt;MongoDB备份数据引擎升级&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认已经安装需要运行的MongoDB版本&lt;/li&gt;
&lt;li&gt;确保有足够的空间进行数据导出导入&lt;/li&gt;
&lt;li&gt;您必须使用MongoDB版本3.0或更高版本才能使用WireldTiger存储引擎。 如果使用较早的MongoDB版本，则必须在继续更改存储引擎之前升级MongoDB版本。本文使用的是MongoDB 3.6&lt;/li&gt;
&lt;li&gt;本文使用docker来操作，请自行安装好docker环境。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="MongoDB,Docker" scheme="https://zhusas.github.io/tags/MongoDB-Docker/"/>
    
  </entry>
  
</feed>
